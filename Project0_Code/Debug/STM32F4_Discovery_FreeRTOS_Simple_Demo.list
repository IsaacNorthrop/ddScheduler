
STM32F4_Discovery_FreeRTOS_Simple_Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08004a4c  08004a4c  00014a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  20000000  08004a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  6 .bss          00001e70  2000007c  2000007c  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20001eec  20001eec  0002007c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f566  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002762  00000000  00000000  0002f610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000af0  00000000  00000000  00031d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009a8  00000000  00000000  00032868  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005a42  00000000  00000000  00033210  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003e3e  00000000  00000000  00038c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003ca90  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003060  00000000  00000000  0003cb0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a30 	.word	0x08004a30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004a30 	.word	0x08004a30

080001d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f103 0208 	add.w	r2, r3, #8
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f04f 32ff 	mov.w	r2, #4294967295
 80001e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f103 0208 	add.w	r2, r3, #8
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f103 0208 	add.w	r2, r3, #8
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr

08000210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800022a:	b480      	push	{r7}
 800022c:	b085      	sub	sp, #20
 800022e:	af00      	add	r7, sp, #0
 8000230:	6078      	str	r0, [r7, #4]
 8000232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	68fa      	ldr	r2, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	689a      	ldr	r2, [r3, #8]
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	689b      	ldr	r3, [r3, #8]
 800024c:	683a      	ldr	r2, [r7, #0]
 800024e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	683a      	ldr	r2, [r7, #0]
 8000254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	1c5a      	adds	r2, r3, #1
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	601a      	str	r2, [r3, #0]
}
 8000266:	bf00      	nop
 8000268:	3714      	adds	r7, #20
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr

08000272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
 800027a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000288:	d103      	bne.n	8000292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	691b      	ldr	r3, [r3, #16]
 800028e:	60fb      	str	r3, [r7, #12]
 8000290:	e00c      	b.n	80002ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3308      	adds	r3, #8
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	e002      	b.n	80002a0 <vListInsert+0x2e>
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	60fb      	str	r3, [r7, #12]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d9f6      	bls.n	800029a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	685b      	ldr	r3, [r3, #4]
 80002b8:	683a      	ldr	r2, [r7, #0]
 80002ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	1c5a      	adds	r2, r3, #1
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	601a      	str	r2, [r3, #0]
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	6892      	ldr	r2, [r2, #8]
 80002fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	6852      	ldr	r2, [r2, #4]
 8000304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	685a      	ldr	r2, [r3, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	d103      	bne.n	8000318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2200      	movs	r2, #0
 800031c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	1e5a      	subs	r2, r3, #1
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	681b      	ldr	r3, [r3, #0]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	3b04      	subs	r3, #4
 8000348:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	3b04      	subs	r3, #4
 8000356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	f023 0201 	bic.w	r2, r3, #1
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3b04      	subs	r3, #4
 8000366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <pxPortInitialiseStack+0x64>)
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3b14      	subs	r3, #20
 8000372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3b04      	subs	r3, #4
 800037e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f06f 0202 	mvn.w	r2, #2
 8000386:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	3b20      	subs	r3, #32
 800038c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800038e:	68fb      	ldr	r3, [r7, #12]
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	080003a1 	.word	0x080003a1

080003a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80003a6:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <prvTaskExitError+0x38>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003ae:	d009      	beq.n	80003c4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80003b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003b4:	f383 8811 	msr	BASEPRI, r3
 80003b8:	f3bf 8f6f 	isb	sy
 80003bc:	f3bf 8f4f 	dsb	sy
 80003c0:	607b      	str	r3, [r7, #4]
 80003c2:	e7fe      	b.n	80003c2 <prvTaskExitError+0x22>
 80003c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80003c8:	f383 8811 	msr	BASEPRI, r3
 80003cc:	f3bf 8f6f 	isb	sy
 80003d0:	f3bf 8f4f 	dsb	sy
 80003d4:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80003d6:	e7fe      	b.n	80003d6 <prvTaskExitError+0x36>
 80003d8:	20000000 	.word	0x20000000
 80003dc:	00000000 	.word	0x00000000

080003e0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <pxCurrentTCBConst2>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	6808      	ldr	r0, [r1, #0]
 80003e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	f380 8809 	msr	PSP, r0
 80003ee:	f3bf 8f6f 	isb	sy
 80003f2:	f04f 0000 	mov.w	r0, #0
 80003f6:	f380 8811 	msr	BASEPRI, r0
 80003fa:	4770      	bx	lr
 80003fc:	f3af 8000 	nop.w

08000400 <pxCurrentTCBConst2>:
 8000400:	20001cb8 	.word	0x20001cb8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000404:	bf00      	nop
 8000406:	bf00      	nop

08000408 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000408:	4806      	ldr	r0, [pc, #24]	; (8000424 <prvPortStartFirstTask+0x1c>)
 800040a:	6800      	ldr	r0, [r0, #0]
 800040c:	6800      	ldr	r0, [r0, #0]
 800040e:	f380 8808 	msr	MSP, r0
 8000412:	b662      	cpsie	i
 8000414:	b661      	cpsie	f
 8000416:	f3bf 8f4f 	dsb	sy
 800041a:	f3bf 8f6f 	isb	sy
 800041e:	df00      	svc	0
 8000420:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000422:	bf00      	nop
 8000424:	e000ed08 	.word	0xe000ed08

08000428 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b086      	sub	sp, #24
 800042c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800042e:	4b3b      	ldr	r3, [pc, #236]	; (800051c <xPortStartScheduler+0xf4>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a3b      	ldr	r2, [pc, #236]	; (8000520 <xPortStartScheduler+0xf8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d109      	bne.n	800044c <xPortStartScheduler+0x24>
 8000438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800043c:	f383 8811 	msr	BASEPRI, r3
 8000440:	f3bf 8f6f 	isb	sy
 8000444:	f3bf 8f4f 	dsb	sy
 8000448:	613b      	str	r3, [r7, #16]
 800044a:	e7fe      	b.n	800044a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800044c:	4b33      	ldr	r3, [pc, #204]	; (800051c <xPortStartScheduler+0xf4>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a34      	ldr	r2, [pc, #208]	; (8000524 <xPortStartScheduler+0xfc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d109      	bne.n	800046a <xPortStartScheduler+0x42>
 8000456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800045a:	f383 8811 	msr	BASEPRI, r3
 800045e:	f3bf 8f6f 	isb	sy
 8000462:	f3bf 8f4f 	dsb	sy
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	e7fe      	b.n	8000468 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800046a:	4b2f      	ldr	r3, [pc, #188]	; (8000528 <xPortStartScheduler+0x100>)
 800046c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b2db      	uxtb	r3, r3
 8000474:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	22ff      	movs	r2, #255	; 0xff
 800047a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800048c:	b2da      	uxtb	r2, r3
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <xPortStartScheduler+0x104>)
 8000490:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <xPortStartScheduler+0x108>)
 8000494:	2207      	movs	r2, #7
 8000496:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8000498:	e009      	b.n	80004ae <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800049a:	4b25      	ldr	r3, [pc, #148]	; (8000530 <xPortStartScheduler+0x108>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	3b01      	subs	r3, #1
 80004a0:	4a23      	ldr	r2, [pc, #140]	; (8000530 <xPortStartScheduler+0x108>)
 80004a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004b6:	2b80      	cmp	r3, #128	; 0x80
 80004b8:	d0ef      	beq.n	800049a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <xPortStartScheduler+0x108>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	021b      	lsls	r3, r3, #8
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <xPortStartScheduler+0x108>)
 80004c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80004c4:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <xPortStartScheduler+0x108>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004cc:	4a18      	ldr	r2, [pc, #96]	; (8000530 <xPortStartScheduler+0x108>)
 80004ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004da:	4b16      	ldr	r3, [pc, #88]	; (8000534 <xPortStartScheduler+0x10c>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80004e4:	4a13      	ldr	r2, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e6:	4b13      	ldr	r3, [pc, #76]	; (8000534 <xPortStartScheduler+0x10c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80004ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80004f0:	f000 f8d2 	bl	8000698 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80004f4:	4b10      	ldr	r3, [pc, #64]	; (8000538 <xPortStartScheduler+0x110>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80004fa:	f000 f8e9 	bl	80006d0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80004fe:	4a0f      	ldr	r2, [pc, #60]	; (800053c <xPortStartScheduler+0x114>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <xPortStartScheduler+0x114>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800050a:	f7ff ff7d 	bl	8000408 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800050e:	f7ff ff47 	bl	80003a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3718      	adds	r7, #24
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	e000ed00 	.word	0xe000ed00
 8000520:	410fc271 	.word	0x410fc271
 8000524:	410fc270 	.word	0x410fc270
 8000528:	e000e400 	.word	0xe000e400
 800052c:	20000098 	.word	0x20000098
 8000530:	2000009c 	.word	0x2000009c
 8000534:	e000ed20 	.word	0xe000ed20
 8000538:	20000000 	.word	0x20000000
 800053c:	e000ef34 	.word	0xe000ef34

08000540 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800054a:	f383 8811 	msr	BASEPRI, r3
 800054e:	f3bf 8f6f 	isb	sy
 8000552:	f3bf 8f4f 	dsb	sy
 8000556:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000558:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <vPortEnterCritical+0x54>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	3301      	adds	r3, #1
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <vPortEnterCritical+0x54>)
 8000560:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <vPortEnterCritical+0x54>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d10e      	bne.n	8000588 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <vPortEnterCritical+0x58>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	b2db      	uxtb	r3, r3
 8000570:	2b00      	cmp	r3, #0
 8000572:	d009      	beq.n	8000588 <vPortEnterCritical+0x48>
 8000574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000578:	f383 8811 	msr	BASEPRI, r3
 800057c:	f3bf 8f6f 	isb	sy
 8000580:	f3bf 8f4f 	dsb	sy
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	e7fe      	b.n	8000586 <vPortEnterCritical+0x46>
	}
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000000 	.word	0x20000000
 8000598:	e000ed04 	.word	0xe000ed04

0800059c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <vPortExitCritical+0x4c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d109      	bne.n	80005be <vPortExitCritical+0x22>
 80005aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ae:	f383 8811 	msr	BASEPRI, r3
 80005b2:	f3bf 8f6f 	isb	sy
 80005b6:	f3bf 8f4f 	dsb	sy
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	e7fe      	b.n	80005bc <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80005be:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	4a08      	ldr	r2, [pc, #32]	; (80005e8 <vPortExitCritical+0x4c>)
 80005c6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <vPortExitCritical+0x4c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d104      	bne.n	80005da <vPortExitCritical+0x3e>
 80005d0:	2300      	movs	r3, #0
 80005d2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80005da:	bf00      	nop
 80005dc:	370c      	adds	r7, #12
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000000 	.word	0x20000000
 80005ec:	00000000 	.word	0x00000000

080005f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80005f0:	f3ef 8009 	mrs	r0, PSP
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	4b15      	ldr	r3, [pc, #84]	; (8000650 <pxCurrentTCBConst>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f01e 0f10 	tst.w	lr, #16
 8000600:	bf08      	it	eq
 8000602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8000606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800060a:	6010      	str	r0, [r2, #0]
 800060c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8000610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8000614:	f380 8811 	msr	BASEPRI, r0
 8000618:	f3bf 8f4f 	dsb	sy
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f001 fc10 	bl	8001e44 <vTaskSwitchContext>
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	f380 8811 	msr	BASEPRI, r0
 800062c:	bc08      	pop	{r3}
 800062e:	6819      	ldr	r1, [r3, #0]
 8000630:	6808      	ldr	r0, [r1, #0]
 8000632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000636:	f01e 0f10 	tst.w	lr, #16
 800063a:	bf08      	it	eq
 800063c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8000640:	f380 8809 	msr	PSP, r0
 8000644:	f3bf 8f6f 	isb	sy
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	f3af 8000 	nop.w

08000650 <pxCurrentTCBConst>:
 8000650:	20001cb8 	.word	0x20001cb8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop

08000658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
	__asm volatile
 800065e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000662:	f383 8811 	msr	BASEPRI, r3
 8000666:	f3bf 8f6f 	isb	sy
 800066a:	f3bf 8f4f 	dsb	sy
 800066e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000670:	f001 fb2c 	bl	8001ccc <xTaskIncrementTick>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d003      	beq.n	8000682 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <SysTick_Handler+0x3c>)
 800067c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	e000ed04 	.word	0xe000ed04

08000698 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800069c:	4a08      	ldr	r2, [pc, #32]	; (80006c0 <vPortSetupTimerInterrupt+0x28>)
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <vPortSetupTimerInterrupt+0x2c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4909      	ldr	r1, [pc, #36]	; (80006c8 <vPortSetupTimerInterrupt+0x30>)
 80006a4:	fba1 1303 	umull	r1, r3, r1, r3
 80006a8:	099b      	lsrs	r3, r3, #6
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <vPortSetupTimerInterrupt+0x34>)
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e014 	.word	0xe000e014
 80006c4:	20000014 	.word	0x20000014
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e010 	.word	0xe000e010

080006d0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80006d0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80006e0 <vPortEnableVFP+0x10>
 80006d4:	6801      	ldr	r1, [r0, #0]
 80006d6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006da:	6001      	str	r1, [r0, #0]
 80006dc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80006de:	bf00      	nop
 80006e0:	e000ed88 	.word	0xe000ed88

080006e4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80006ea:	f3ef 8305 	mrs	r3, IPSR
 80006ee:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b0f      	cmp	r3, #15
 80006f4:	d913      	bls.n	800071e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80006f6:	4a16      	ldr	r2, [pc, #88]	; (8000750 <vPortValidateInterruptPriority+0x6c>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <vPortValidateInterruptPriority+0x70>)
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	7afa      	ldrb	r2, [r7, #11]
 8000706:	429a      	cmp	r2, r3
 8000708:	d209      	bcs.n	800071e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800070a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800070e:	f383 8811 	msr	BASEPRI, r3
 8000712:	f3bf 8f6f 	isb	sy
 8000716:	f3bf 8f4f 	dsb	sy
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	e7fe      	b.n	800071c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <vPortValidateInterruptPriority+0x74>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <vPortValidateInterruptPriority+0x78>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d909      	bls.n	8000742 <vPortValidateInterruptPriority+0x5e>
 800072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000732:	f383 8811 	msr	BASEPRI, r3
 8000736:	f3bf 8f6f 	isb	sy
 800073a:	f3bf 8f4f 	dsb	sy
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	e7fe      	b.n	8000740 <vPortValidateInterruptPriority+0x5c>
	}
 8000742:	bf00      	nop
 8000744:	3714      	adds	r7, #20
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e3f0 	.word	0xe000e3f0
 8000754:	20000098 	.word	0x20000098
 8000758:	e000ed0c 	.word	0xe000ed0c
 800075c:	2000009c 	.word	0x2000009c

08000760 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800076c:	f001 f9f4 	bl	8001b58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000770:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <pvPortMalloc+0x178>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000778:	f000 f91c 	bl	80009b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800077c:	4b57      	ldr	r3, [pc, #348]	; (80008dc <pvPortMalloc+0x17c>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4013      	ands	r3, r2
 8000784:	2b00      	cmp	r3, #0
 8000786:	f040 808c 	bne.w	80008a2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d01c      	beq.n	80007ca <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8000790:	2208      	movs	r2, #8
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4413      	add	r3, r2
 8000796:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d013      	beq.n	80007ca <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f023 0307 	bic.w	r3, r3, #7
 80007a8:	3308      	adds	r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d009      	beq.n	80007ca <pvPortMalloc+0x6a>
 80007b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80007ba:	f383 8811 	msr	BASEPRI, r3
 80007be:	f3bf 8f6f 	isb	sy
 80007c2:	f3bf 8f4f 	dsb	sy
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e7fe      	b.n	80007c8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d068      	beq.n	80008a2 <pvPortMalloc+0x142>
 80007d0:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <pvPortMalloc+0x180>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d863      	bhi.n	80008a2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80007da:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <pvPortMalloc+0x184>)
 80007dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80007de:	4b41      	ldr	r3, [pc, #260]	; (80008e4 <pvPortMalloc+0x184>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007e4:	e004      	b.n	80007f0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d203      	bcs.n	8000802 <pvPortMalloc+0xa2>
 80007fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1f1      	bne.n	80007e6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000802:	4b35      	ldr	r3, [pc, #212]	; (80008d8 <pvPortMalloc+0x178>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000808:	429a      	cmp	r2, r3
 800080a:	d04a      	beq.n	80008a2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800080c:	6a3b      	ldr	r3, [r7, #32]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2208      	movs	r2, #8
 8000812:	4413      	add	r3, r2
 8000814:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	6a3b      	ldr	r3, [r7, #32]
 800081c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800081e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000820:	685a      	ldr	r2, [r3, #4]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1ad2      	subs	r2, r2, r3
 8000826:	2308      	movs	r3, #8
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	429a      	cmp	r2, r3
 800082c:	d91e      	bls.n	800086c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800082e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000836:	69bb      	ldr	r3, [r7, #24]
 8000838:	f003 0307 	and.w	r3, r3, #7
 800083c:	2b00      	cmp	r3, #0
 800083e:	d009      	beq.n	8000854 <pvPortMalloc+0xf4>
 8000840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000844:	f383 8811 	msr	BASEPRI, r3
 8000848:	f3bf 8f6f 	isb	sy
 800084c:	f3bf 8f4f 	dsb	sy
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	e7fe      	b.n	8000852 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	1ad2      	subs	r2, r2, r3
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000866:	69b8      	ldr	r0, [r7, #24]
 8000868:	f000 f906 	bl	8000a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <pvPortMalloc+0x180>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	4a1a      	ldr	r2, [pc, #104]	; (80008e0 <pvPortMalloc+0x180>)
 8000878:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <pvPortMalloc+0x180>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <pvPortMalloc+0x188>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	429a      	cmp	r2, r3
 8000884:	d203      	bcs.n	800088e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <pvPortMalloc+0x180>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <pvPortMalloc+0x188>)
 800088c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	685a      	ldr	r2, [r3, #4]
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <pvPortMalloc+0x17c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	431a      	orrs	r2, r3
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800089c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80008a2:	f001 f967 	bl	8001b74 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80008a6:	69fb      	ldr	r3, [r7, #28]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d101      	bne.n	80008b0 <pvPortMalloc+0x150>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80008ac:	f002 febc 	bl	8003628 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d009      	beq.n	80008ce <pvPortMalloc+0x16e>
 80008ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008be:	f383 8811 	msr	BASEPRI, r3
 80008c2:	f3bf 8f6f 	isb	sy
 80008c6:	f3bf 8f4f 	dsb	sy
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	e7fe      	b.n	80008cc <pvPortMalloc+0x16c>
	return pvReturn;
 80008ce:	69fb      	ldr	r3, [r7, #28]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3728      	adds	r7, #40	; 0x28
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20001ca8 	.word	0x20001ca8
 80008dc:	20001cb4 	.word	0x20001cb4
 80008e0:	20001cac 	.word	0x20001cac
 80008e4:	20001ca0 	.word	0x20001ca0
 80008e8:	20001cb0 	.word	0x20001cb0

080008ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d046      	beq.n	800098c <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80008fe:	2308      	movs	r3, #8
 8000900:	425b      	negs	r3, r3
 8000902:	697a      	ldr	r2, [r7, #20]
 8000904:	4413      	add	r3, r2
 8000906:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <vPortFree+0xa8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4013      	ands	r3, r2
 8000916:	2b00      	cmp	r3, #0
 8000918:	d109      	bne.n	800092e <vPortFree+0x42>
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e7fe      	b.n	800092c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d009      	beq.n	800094a <vPortFree+0x5e>
 8000936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800093a:	f383 8811 	msr	BASEPRI, r3
 800093e:	f3bf 8f6f 	isb	sy
 8000942:	f3bf 8f4f 	dsb	sy
 8000946:	60bb      	str	r3, [r7, #8]
 8000948:	e7fe      	b.n	8000948 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <vPortFree+0xa8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4013      	ands	r3, r2
 8000954:	2b00      	cmp	r3, #0
 8000956:	d019      	beq.n	800098c <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d115      	bne.n	800098c <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <vPortFree+0xa8>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	43db      	mvns	r3, r3
 800096a:	401a      	ands	r2, r3
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000970:	f001 f8f2 	bl	8001b58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <vPortFree+0xac>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4413      	add	r3, r2
 800097e:	4a06      	ldr	r2, [pc, #24]	; (8000998 <vPortFree+0xac>)
 8000980:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000982:	6938      	ldr	r0, [r7, #16]
 8000984:	f000 f878 	bl	8000a78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000988:	f001 f8f4 	bl	8001b74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800098c:	bf00      	nop
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20001cb4 	.word	0x20001cb4
 8000998:	20001cac 	.word	0x20001cac

0800099c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <xPortGetFreeHeapSize+0x14>)
 80009a2:	681b      	ldr	r3, [r3, #0]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	20001cac 	.word	0x20001cac

080009b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009ba:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80009be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009c0:	4b27      	ldr	r3, [pc, #156]	; (8000a60 <prvHeapInit+0xac>)
 80009c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d00c      	beq.n	80009e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	3307      	adds	r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f023 0307 	bic.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	4a1f      	ldr	r2, [pc, #124]	; (8000a60 <prvHeapInit+0xac>)
 80009e4:	4413      	add	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80009ec:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <prvHeapInit+0xb0>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <prvHeapInit+0xb0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	4413      	add	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a00:	2208      	movs	r2, #8
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	1a9b      	subs	r3, r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	f023 0307 	bic.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <prvHeapInit+0xb4>)
 8000a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a16:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <prvHeapInit+0xb4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <prvHeapInit+0xb4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	68fa      	ldr	r2, [r7, #12]
 8000a2e:	1ad2      	subs	r2, r2, r3
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <prvHeapInit+0xb4>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <prvHeapInit+0xb8>)
 8000a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <prvHeapInit+0xbc>)
 8000a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <prvHeapInit+0xc0>)
 8000a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	200000a0 	.word	0x200000a0
 8000a64:	20001ca0 	.word	0x20001ca0
 8000a68:	20001ca8 	.word	0x20001ca8
 8000a6c:	20001cb0 	.word	0x20001cb0
 8000a70:	20001cac 	.word	0x20001cac
 8000a74:	20001cb4 	.word	0x20001cb4

08000a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000a80:	4b28      	ldr	r3, [pc, #160]	; (8000b24 <prvInsertBlockIntoFreeList+0xac>)
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e002      	b.n	8000a8c <prvInsertBlockIntoFreeList+0x14>
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3f7      	bcc.n	8000a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	441a      	add	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d108      	bne.n	8000aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	441a      	add	r2, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d118      	bne.n	8000b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d00d      	beq.n	8000af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	e008      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <prvInsertBlockIntoFreeList+0xb0>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e003      	b.n	8000b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b08:	68fa      	ldr	r2, [r7, #12]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d002      	beq.n	8000b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20001ca0 	.word	0x20001ca0
 8000b28:	20001ca8 	.word	0x20001ca8

08000b2c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d109      	bne.n	8000b54 <xQueueGenericReset+0x28>
 8000b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b44:	f383 8811 	msr	BASEPRI, r3
 8000b48:	f3bf 8f6f 	isb	sy
 8000b4c:	f3bf 8f4f 	dsb	sy
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	e7fe      	b.n	8000b52 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000b54:	f7ff fcf4 	bl	8000540 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b60:	68f9      	ldr	r1, [r7, #12]
 8000b62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b64:	fb01 f303 	mul.w	r3, r1, r3
 8000b68:	441a      	add	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2200      	movs	r2, #0
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b84:	3b01      	subs	r3, #1
 8000b86:	68f9      	ldr	r1, [r7, #12]
 8000b88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000b8a:	fb01 f303 	mul.w	r3, r1, r3
 8000b8e:	441a      	add	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	22ff      	movs	r2, #255	; 0xff
 8000b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	22ff      	movs	r2, #255	; 0xff
 8000ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d114      	bne.n	8000bd4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d01a      	beq.n	8000be8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3310      	adds	r3, #16
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f001 fa12 	bl	8001fe0 <xTaskRemoveFromEventList>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d012      	beq.n	8000be8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <xQueueGenericReset+0xcc>)
 8000bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	f3bf 8f4f 	dsb	sy
 8000bce:	f3bf 8f6f 	isb	sy
 8000bd2:	e009      	b.n	8000be8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3310      	adds	r3, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff faf9 	bl	80001d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3324      	adds	r3, #36	; 0x24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff faf4 	bl	80001d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000be8:	f7ff fcd8 	bl	800059c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000bec:	2301      	movs	r3, #1
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000ed04 	.word	0xe000ed04

08000bfc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af02      	add	r7, sp, #8
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	4613      	mov	r3, r2
 8000c08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d109      	bne.n	8000c24 <xQueueGenericCreate+0x28>
 8000c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000c14:	f383 8811 	msr	BASEPRI, r3
 8000c18:	f3bf 8f6f 	isb	sy
 8000c1c:	f3bf 8f4f 	dsb	sy
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	e7fe      	b.n	8000c22 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d102      	bne.n	8000c30 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e004      	b.n	8000c3a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	fb02 f303 	mul.w	r3, r2, r3
 8000c38:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3348      	adds	r3, #72	; 0x48
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fd8e 	bl	8000760 <pvPortMalloc>
 8000c44:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00b      	beq.n	8000c64 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	3348      	adds	r3, #72	; 0x48
 8000c50:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000c52:	79fa      	ldrb	r2, [r7, #7]
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	9300      	str	r3, [sp, #0]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	68b9      	ldr	r1, [r7, #8]
 8000c5e:	68f8      	ldr	r0, [r7, #12]
 8000c60:	f000 f805 	bl	8000c6e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8000c64:	69bb      	ldr	r3, [r7, #24]
	}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b084      	sub	sp, #16
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	60f8      	str	r0, [r7, #12]
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d103      	bne.n	8000c8a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	e002      	b.n	8000c90 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000c8a:	69bb      	ldr	r3, [r7, #24]
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	69b8      	ldr	r0, [r7, #24]
 8000ca0:	f7ff ff44 	bl	8000b2c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08e      	sub	sp, #56	; 0x38
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
 8000cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d109      	bne.n	8000cdc <xQueueGenericSend+0x30>
 8000cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ccc:	f383 8811 	msr	BASEPRI, r3
 8000cd0:	f3bf 8f6f 	isb	sy
 8000cd4:	f3bf 8f4f 	dsb	sy
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cda:	e7fe      	b.n	8000cda <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d103      	bne.n	8000cea <xQueueGenericSend+0x3e>
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <xQueueGenericSend+0x42>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e000      	b.n	8000cf0 <xQueueGenericSend+0x44>
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d109      	bne.n	8000d08 <xQueueGenericSend+0x5c>
 8000cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cf8:	f383 8811 	msr	BASEPRI, r3
 8000cfc:	f3bf 8f6f 	isb	sy
 8000d00:	f3bf 8f4f 	dsb	sy
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
 8000d06:	e7fe      	b.n	8000d06 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d103      	bne.n	8000d16 <xQueueGenericSend+0x6a>
 8000d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d101      	bne.n	8000d1a <xQueueGenericSend+0x6e>
 8000d16:	2301      	movs	r3, #1
 8000d18:	e000      	b.n	8000d1c <xQueueGenericSend+0x70>
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d109      	bne.n	8000d34 <xQueueGenericSend+0x88>
 8000d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d24:	f383 8811 	msr	BASEPRI, r3
 8000d28:	f3bf 8f6f 	isb	sy
 8000d2c:	f3bf 8f4f 	dsb	sy
 8000d30:	623b      	str	r3, [r7, #32]
 8000d32:	e7fe      	b.n	8000d32 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d34:	f001 fb10 	bl	8002358 <xTaskGetSchedulerState>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d102      	bne.n	8000d44 <xQueueGenericSend+0x98>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <xQueueGenericSend+0x9c>
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <xQueueGenericSend+0x9e>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d109      	bne.n	8000d62 <xQueueGenericSend+0xb6>
 8000d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d52:	f383 8811 	msr	BASEPRI, r3
 8000d56:	f3bf 8f6f 	isb	sy
 8000d5a:	f3bf 8f4f 	dsb	sy
 8000d5e:	61fb      	str	r3, [r7, #28]
 8000d60:	e7fe      	b.n	8000d60 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8000d62:	f7ff fbed 	bl	8000540 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d302      	bcc.n	8000d78 <xQueueGenericSend+0xcc>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d129      	bne.n	8000dcc <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	68b9      	ldr	r1, [r7, #8]
 8000d7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d7e:	f000 fa35 	bl	80011ec <prvCopyDataToQueue>
 8000d82:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d010      	beq.n	8000dae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8e:	3324      	adds	r3, #36	; 0x24
 8000d90:	4618      	mov	r0, r3
 8000d92:	f001 f925 	bl	8001fe0 <xTaskRemoveFromEventList>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d013      	beq.n	8000dc4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8000d9c:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	f3bf 8f4f 	dsb	sy
 8000da8:	f3bf 8f6f 	isb	sy
 8000dac:	e00a      	b.n	8000dc4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8000dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d007      	beq.n	8000dc4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8000db4:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	f3bf 8f4f 	dsb	sy
 8000dc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8000dc4:	f7ff fbea 	bl	800059c <vPortExitCritical>
				return pdPASS;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e063      	b.n	8000e94 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d103      	bne.n	8000dda <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8000dd2:	f7ff fbe3 	bl	800059c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e05c      	b.n	8000e94 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8000dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d106      	bne.n	8000dee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 f95d 	bl	80020a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8000dea:	2301      	movs	r3, #1
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8000dee:	f7ff fbd5 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8000df2:	f000 feb1 	bl	8001b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8000df6:	f7ff fba3 	bl	8000540 <vPortEnterCritical>
 8000dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e06:	d103      	bne.n	8000e10 <xQueueGenericSend+0x164>
 8000e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d103      	bne.n	8000e26 <xQueueGenericSend+0x17a>
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000e26:	f7ff fbb9 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000e2a:	1d3a      	adds	r2, r7, #4
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 f95a 	bl	80020ec <xTaskCheckForTimeOut>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d124      	bne.n	8000e88 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8000e3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e40:	f000 facc 	bl	80013dc <prvIsQueueFull>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d018      	beq.n	8000e7c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8000e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e4c:	3310      	adds	r3, #16
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 f876 	bl	8001f44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8000e58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e5a:	f000 fa57 	bl	800130c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8000e5e:	f000 fe89 	bl	8001b74 <xTaskResumeAll>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	f47f af7c 	bne.w	8000d62 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <xQueueGenericSend+0x1f0>)
 8000e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	f3bf 8f4f 	dsb	sy
 8000e76:	f3bf 8f6f 	isb	sy
 8000e7a:	e772      	b.n	8000d62 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8000e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e7e:	f000 fa45 	bl	800130c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8000e82:	f000 fe77 	bl	8001b74 <xTaskResumeAll>
 8000e86:	e76c      	b.n	8000d62 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8000e88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000e8a:	f000 fa3f 	bl	800130c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8000e8e:	f000 fe71 	bl	8001b74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8000e92:	2300      	movs	r3, #0
		}
	}
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3738      	adds	r7, #56	; 0x38
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	e000ed04 	.word	0xe000ed04

08000ea0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d109      	bne.n	8000ecc <xQueueGenericSendFromISR+0x2c>
 8000eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ebc:	f383 8811 	msr	BASEPRI, r3
 8000ec0:	f3bf 8f6f 	isb	sy
 8000ec4:	f3bf 8f4f 	dsb	sy
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eca:	e7fe      	b.n	8000eca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d103      	bne.n	8000eda <xQueueGenericSendFromISR+0x3a>
 8000ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <xQueueGenericSendFromISR+0x3e>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <xQueueGenericSendFromISR+0x40>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d109      	bne.n	8000ef8 <xQueueGenericSendFromISR+0x58>
 8000ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee8:	f383 8811 	msr	BASEPRI, r3
 8000eec:	f3bf 8f6f 	isb	sy
 8000ef0:	f3bf 8f4f 	dsb	sy
 8000ef4:	623b      	str	r3, [r7, #32]
 8000ef6:	e7fe      	b.n	8000ef6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	2b02      	cmp	r3, #2
 8000efc:	d103      	bne.n	8000f06 <xQueueGenericSendFromISR+0x66>
 8000efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d101      	bne.n	8000f0a <xQueueGenericSendFromISR+0x6a>
 8000f06:	2301      	movs	r3, #1
 8000f08:	e000      	b.n	8000f0c <xQueueGenericSendFromISR+0x6c>
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d109      	bne.n	8000f24 <xQueueGenericSendFromISR+0x84>
 8000f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f14:	f383 8811 	msr	BASEPRI, r3
 8000f18:	f3bf 8f6f 	isb	sy
 8000f1c:	f3bf 8f4f 	dsb	sy
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e7fe      	b.n	8000f22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8000f24:	f7ff fbde 	bl	80006e4 <vPortValidateInterruptPriority>
	__asm volatile
 8000f28:	f3ef 8211 	mrs	r2, BASEPRI
 8000f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f30:	f383 8811 	msr	BASEPRI, r3
 8000f34:	f3bf 8f6f 	isb	sy
 8000f38:	f3bf 8f4f 	dsb	sy
 8000f3c:	61ba      	str	r2, [r7, #24]
 8000f3e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8000f40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d302      	bcc.n	8000f56 <xQueueGenericSendFromISR+0xb6>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d12c      	bne.n	8000fb0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8000f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f66:	f000 f941 	bl	80011ec <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8000f6a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8000f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f72:	d112      	bne.n	8000f9a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d016      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f7e:	3324      	adds	r3, #36	; 0x24
 8000f80:	4618      	mov	r0, r3
 8000f82:	f001 f82d 	bl	8001fe0 <xTaskRemoveFromEventList>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d00e      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	e007      	b.n	8000faa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8000f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8000faa:	2301      	movs	r3, #1
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8000fae:	e001      	b.n	8000fb4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb6:	613b      	str	r3, [r7, #16]
	__asm volatile
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8000fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3738      	adds	r7, #56	; 0x38
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08e      	sub	sp, #56	; 0x38
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8000fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d109      	bne.n	8000ff8 <xQueueGenericReceive+0x30>
	__asm volatile
 8000fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fe8:	f383 8811 	msr	BASEPRI, r3
 8000fec:	f3bf 8f6f 	isb	sy
 8000ff0:	f3bf 8f4f 	dsb	sy
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	e7fe      	b.n	8000ff6 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d103      	bne.n	8001006 <xQueueGenericReceive+0x3e>
 8000ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <xQueueGenericReceive+0x42>
 8001006:	2301      	movs	r3, #1
 8001008:	e000      	b.n	800100c <xQueueGenericReceive+0x44>
 800100a:	2300      	movs	r3, #0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d109      	bne.n	8001024 <xQueueGenericReceive+0x5c>
 8001010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001014:	f383 8811 	msr	BASEPRI, r3
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	f3bf 8f4f 	dsb	sy
 8001020:	623b      	str	r3, [r7, #32]
 8001022:	e7fe      	b.n	8001022 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001024:	f001 f998 	bl	8002358 <xTaskGetSchedulerState>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <xQueueGenericReceive+0x6c>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <xQueueGenericReceive+0x70>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <xQueueGenericReceive+0x72>
 8001038:	2300      	movs	r3, #0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <xQueueGenericReceive+0x8a>
 800103e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001042:	f383 8811 	msr	BASEPRI, r3
 8001046:	f3bf 8f6f 	isb	sy
 800104a:	f3bf 8f4f 	dsb	sy
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	e7fe      	b.n	8001050 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001052:	f7ff fa75 	bl	8000540 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800105c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105e:	2b00      	cmp	r3, #0
 8001060:	d046      	beq.n	80010f0 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800106c:	f000 f928 	bl	80012c0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d121      	bne.n	80010ba <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	1e5a      	subs	r2, r3, #1
 800107a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800107e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d104      	bne.n	8001090 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001086:	f001 fa7f 	bl	8002588 <pvTaskIncrementMutexHeldCount>
 800108a:	4602      	mov	r2, r0
 800108c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108e:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001092:	691b      	ldr	r3, [r3, #16]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d027      	beq.n	80010e8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109a:	3310      	adds	r3, #16
 800109c:	4618      	mov	r0, r3
 800109e:	f000 ff9f 	bl	8001fe0 <xTaskRemoveFromEventList>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d01f      	beq.n	80010e8 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <xQueueGenericReceive+0x220>)
 80010aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	f3bf 8f4f 	dsb	sy
 80010b4:	f3bf 8f6f 	isb	sy
 80010b8:	e016      	b.n	80010e8 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 80010ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010be:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80010c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00f      	beq.n	80010e8 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80010c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ca:	3324      	adds	r3, #36	; 0x24
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 ff87 	bl	8001fe0 <xTaskRemoveFromEventList>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d007      	beq.n	80010e8 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 80010d8:	4b43      	ldr	r3, [pc, #268]	; (80011e8 <xQueueGenericReceive+0x220>)
 80010da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f3bf 8f4f 	dsb	sy
 80010e4:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 80010e8:	f7ff fa58 	bl	800059c <vPortExitCritical>
				return pdPASS;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e077      	b.n	80011e0 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80010f6:	f7ff fa51 	bl	800059c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e070      	b.n	80011e0 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 80010fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	4618      	mov	r0, r3
 800110a:	f000 ffcb 	bl	80020a4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800110e:	2301      	movs	r3, #1
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001112:	f7ff fa43 	bl	800059c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001116:	f000 fd1f 	bl	8001b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800111a:	f7ff fa11 	bl	8000540 <vPortEnterCritical>
 800111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001124:	b25b      	sxtb	r3, r3
 8001126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112a:	d103      	bne.n	8001134 <xQueueGenericReceive+0x16c>
 800112c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112e:	2200      	movs	r2, #0
 8001130:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001136:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800113a:	b25b      	sxtb	r3, r3
 800113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001140:	d103      	bne.n	800114a <xQueueGenericReceive+0x182>
 8001142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800114a:	f7ff fa27 	bl	800059c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800114e:	1d3a      	adds	r2, r7, #4
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f000 ffc8 	bl	80020ec <xTaskCheckForTimeOut>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d131      	bne.n	80011c6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001162:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001164:	f000 f924 	bl	80013b0 <prvIsQueueEmpty>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d025      	beq.n	80011ba <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800116e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d108      	bne.n	8001188 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8001176:	f7ff f9e3 	bl	8000540 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800117a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 f908 	bl	8002394 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8001184:	f7ff fa0a 	bl	800059c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	3324      	adds	r3, #36	; 0x24
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fed7 	bl	8001f44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001196:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001198:	f000 f8b8 	bl	800130c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800119c:	f000 fcea 	bl	8001b74 <xTaskResumeAll>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f47f af55 	bne.w	8001052 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <xQueueGenericReceive+0x220>)
 80011aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	e74b      	b.n	8001052 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80011ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011bc:	f000 f8a6 	bl	800130c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80011c0:	f000 fcd8 	bl	8001b74 <xTaskResumeAll>
 80011c4:	e745      	b.n	8001052 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80011c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011c8:	f000 f8a0 	bl	800130c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80011cc:	f000 fcd2 	bl	8001b74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80011d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011d2:	f000 f8ed 	bl	80013b0 <prvIsQueueEmpty>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f43f af3a 	beq.w	8001052 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80011de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3738      	adds	r7, #56	; 0x38
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	e000ed04 	.word	0xe000ed04

080011ec <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001200:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	2b00      	cmp	r3, #0
 8001208:	d10d      	bne.n	8001226 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d14d      	bne.n	80012ae <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4618      	mov	r0, r3
 8001218:	f001 f932 	bl	8002480 <xTaskPriorityDisinherit>
 800121c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	e043      	b.n	80012ae <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d119      	bne.n	8001260 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6898      	ldr	r0, [r3, #8]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	461a      	mov	r2, r3
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	f002 fe8c 	bl	8003f54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	441a      	add	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	d32b      	bcc.n	80012ae <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	e026      	b.n	80012ae <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	461a      	mov	r2, r3
 800126a:	68b9      	ldr	r1, [r7, #8]
 800126c:	f002 fe72 	bl	8003f54 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	68da      	ldr	r2, [r3, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	425b      	negs	r3, r3
 800127a:	441a      	add	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d207      	bcs.n	800129c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	425b      	negs	r3, r3
 8001296:	441a      	add	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d105      	bne.n	80012ae <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	1c5a      	adds	r2, r3, #1
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80012b6:	697b      	ldr	r3, [r7, #20]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d018      	beq.n	8001304 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	441a      	add	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d303      	bcc.n	80012f4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68d9      	ldr	r1, [r3, #12]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	461a      	mov	r2, r3
 80012fe:	6838      	ldr	r0, [r7, #0]
 8001300:	f002 fe28 	bl	8003f54 <memcpy>
	}
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001314:	f7ff f914 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800131e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001320:	e011      	b.n	8001346 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001326:	2b00      	cmp	r3, #0
 8001328:	d012      	beq.n	8001350 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3324      	adds	r3, #36	; 0x24
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fe56 	bl	8001fe0 <xTaskRemoveFromEventList>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800133a:	f000 ff35 	bl	80021a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	3b01      	subs	r3, #1
 8001342:	b2db      	uxtb	r3, r3
 8001344:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	2b00      	cmp	r3, #0
 800134c:	dce9      	bgt.n	8001322 <prvUnlockQueue+0x16>
 800134e:	e000      	b.n	8001352 <prvUnlockQueue+0x46>
					break;
 8001350:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	22ff      	movs	r2, #255	; 0xff
 8001356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800135a:	f7ff f91f 	bl	800059c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800135e:	f7ff f8ef 	bl	8000540 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001368:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800136a:	e011      	b.n	8001390 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d012      	beq.n	800139a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3310      	adds	r3, #16
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fe31 	bl	8001fe0 <xTaskRemoveFromEventList>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001384:	f000 ff10 	bl	80021a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001388:	7bbb      	ldrb	r3, [r7, #14]
 800138a:	3b01      	subs	r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001390:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001394:	2b00      	cmp	r3, #0
 8001396:	dce9      	bgt.n	800136c <prvUnlockQueue+0x60>
 8001398:	e000      	b.n	800139c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800139a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80013a4:	f7ff f8fa 	bl	800059c <vPortExitCritical>
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013b8:	f7ff f8c2 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80013c4:	2301      	movs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	e001      	b.n	80013ce <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013ce:	f7ff f8e5 	bl	800059c <vPortExitCritical>

	return xReturn;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013e4:	f7ff f8ac 	bl	8000540 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d102      	bne.n	80013fa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80013f4:	2301      	movs	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e001      	b.n	80013fe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80013fe:	f7ff f8cd 	bl	800059c <vPortExitCritical>

	return xReturn;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3710      	adds	r7, #16
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e014      	b.n	8001446 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800141c:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <vQueueAddToRegistry+0x4c>)
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10b      	bne.n	8001440 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8001428:	490b      	ldr	r1, [pc, #44]	; (8001458 <vQueueAddToRegistry+0x4c>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8001432:	4a09      	ldr	r2, [pc, #36]	; (8001458 <vQueueAddToRegistry+0x4c>)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4413      	add	r3, r2
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800143e:	e005      	b.n	800144c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3301      	adds	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b07      	cmp	r3, #7
 800144a:	d9e7      	bls.n	800141c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	20001e14 	.word	0x20001e14

0800145c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800146c:	f7ff f868 	bl	8000540 <vPortEnterCritical>
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001476:	b25b      	sxtb	r3, r3
 8001478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147c:	d103      	bne.n	8001486 <vQueueWaitForMessageRestricted+0x2a>
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800148c:	b25b      	sxtb	r3, r3
 800148e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001492:	d103      	bne.n	800149c <vQueueWaitForMessageRestricted+0x40>
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800149c:	f7ff f87e 	bl	800059c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d106      	bne.n	80014b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	3324      	adds	r3, #36	; 0x24
 80014ac:	687a      	ldr	r2, [r7, #4]
 80014ae:	68b9      	ldr	r1, [r7, #8]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fd6b 	bl	8001f8c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff28 	bl	800130c <prvUnlockQueue>
	}
 80014bc:	bf00      	nop
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	; 0x30
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	4613      	mov	r3, r2
 80014d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff f941 	bl	8000760 <pvPortMalloc>
 80014de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00e      	beq.n	8001504 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80014e6:	2050      	movs	r0, #80	; 0x50
 80014e8:	f7ff f93a 	bl	8000760 <pvPortMalloc>
 80014ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
 80014fa:	e005      	b.n	8001508 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80014fc:	6978      	ldr	r0, [r7, #20]
 80014fe:	f7ff f9f5 	bl	80008ec <vPortFree>
 8001502:	e001      	b.n	8001508 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d013      	beq.n	8001536 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800150e:	88fa      	ldrh	r2, [r7, #6]
 8001510:	2300      	movs	r3, #0
 8001512:	9303      	str	r3, [sp, #12]
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	9302      	str	r3, [sp, #8]
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	9301      	str	r3, [sp, #4]
 800151c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	68b9      	ldr	r1, [r7, #8]
 8001524:	68f8      	ldr	r0, [r7, #12]
 8001526:	f000 f80e 	bl	8001546 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800152a:	69f8      	ldr	r0, [r7, #28]
 800152c:	f000 f892 	bl	8001654 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001530:	2301      	movs	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e002      	b.n	800153c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800153c:	69bb      	ldr	r3, [r7, #24]
	}
 800153e:	4618      	mov	r0, r3
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b088      	sub	sp, #32
 800154a:	af00      	add	r7, sp, #0
 800154c:	60f8      	str	r0, [r7, #12]
 800154e:	60b9      	str	r1, [r7, #8]
 8001550:	607a      	str	r2, [r7, #4]
 8001552:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001556:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	461a      	mov	r2, r3
 800155e:	21a5      	movs	r1, #165	; 0xa5
 8001560:	f002 fd03 	bl	8003f6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800156e:	3b01      	subs	r3, #1
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f023 0307 	bic.w	r3, r3, #7
 800157c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <prvInitialiseNewTask+0x56>
 8001588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800158c:	f383 8811 	msr	BASEPRI, r3
 8001590:	f3bf 8f6f 	isb	sy
 8001594:	f3bf 8f4f 	dsb	sy
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e7fe      	b.n	800159a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	e012      	b.n	80015c8 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	7819      	ldrb	r1, [r3, #0]
 80015aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	4413      	add	r3, r2
 80015b0:	3334      	adds	r3, #52	; 0x34
 80015b2:	460a      	mov	r2, r1
 80015b4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	4413      	add	r3, r2
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d006      	beq.n	80015d0 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b09      	cmp	r3, #9
 80015cc:	d9e9      	bls.n	80015a2 <prvInitialiseNewTask+0x5c>
 80015ce:	e000      	b.n	80015d2 <prvInitialiseNewTask+0x8c>
		{
			break;
 80015d0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80015d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	2b04      	cmp	r3, #4
 80015de:	d901      	bls.n	80015e4 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80015e0:	2304      	movs	r3, #4
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80015e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80015ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40
		pxNewTCB->uxMutexesHeld = 0;
 80015f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f2:	2200      	movs	r2, #0
 80015f4:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f8:	3304      	adds	r3, #4
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fe08 	bl	8000210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001602:	3318      	adds	r3, #24
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe fe03 	bl	8000210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800160a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800160c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800160e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	f1c3 0205 	rsb	r2, r3, #5
 8001616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001618:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800161a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001622:	2200      	movs	r2, #0
 8001624:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001628:	2200      	movs	r2, #0
 800162a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	68f9      	ldr	r1, [r7, #12]
 8001632:	69b8      	ldr	r0, [r7, #24]
 8001634:	f7fe fe80 	bl	8000338 <pxPortInitialiseStack>
 8001638:	4602      	mov	r2, r0
 800163a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800163c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800163e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001648:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800164a:	bf00      	nop
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800165c:	f7fe ff70 	bl	8000540 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001660:	4b2a      	ldr	r3, [pc, #168]	; (800170c <prvAddNewTaskToReadyList+0xb8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	4a29      	ldr	r2, [pc, #164]	; (800170c <prvAddNewTaskToReadyList+0xb8>)
 8001668:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800166a:	4b29      	ldr	r3, [pc, #164]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001672:	4a27      	ldr	r2, [pc, #156]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001678:	4b24      	ldr	r3, [pc, #144]	; (800170c <prvAddNewTaskToReadyList+0xb8>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d110      	bne.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001680:	f000 fdb8 	bl	80021f4 <prvInitialiseTaskLists>
 8001684:	e00d      	b.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <prvAddNewTaskToReadyList+0xc0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d109      	bne.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	429a      	cmp	r2, r3
 800169a:	d802      	bhi.n	80016a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	; (8001718 <prvAddNewTaskToReadyList+0xc4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <prvAddNewTaskToReadyList+0xc4>)
 80016aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b0:	2201      	movs	r2, #1
 80016b2:	409a      	lsls	r2, r3
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <prvAddNewTaskToReadyList+0xc8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	4a18      	ldr	r2, [pc, #96]	; (800171c <prvAddNewTaskToReadyList+0xc8>)
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4a15      	ldr	r2, [pc, #84]	; (8001720 <prvAddNewTaskToReadyList+0xcc>)
 80016cc:	441a      	add	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3304      	adds	r3, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4610      	mov	r0, r2
 80016d6:	f7fe fda8 	bl	800022a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80016da:	f7fe ff5f 	bl	800059c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <prvAddNewTaskToReadyList+0xc0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00e      	beq.n	8001704 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <prvAddNewTaskToReadyList+0xbc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <prvAddNewTaskToReadyList+0xd0>)
 80016f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	f3bf 8f4f 	dsb	sy
 8001700:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20001d90 	.word	0x20001d90
 8001710:	20001cb8 	.word	0x20001cb8
 8001714:	20001d9c 	.word	0x20001d9c
 8001718:	20001dac 	.word	0x20001dac
 800171c:	20001d98 	.word	0x20001d98
 8001720:	20001cbc 	.word	0x20001cbc
 8001724:	e000ed04 	.word	0xe000ed04

08001728 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8001732:	2300      	movs	r3, #0
 8001734:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d109      	bne.n	8001750 <vTaskDelayUntil+0x28>
 800173c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001740:	f383 8811 	msr	BASEPRI, r3
 8001744:	f3bf 8f6f 	isb	sy
 8001748:	f3bf 8f4f 	dsb	sy
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e7fe      	b.n	800174e <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <vTaskDelayUntil+0x42>
 8001756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800175a:	f383 8811 	msr	BASEPRI, r3
 800175e:	f3bf 8f6f 	isb	sy
 8001762:	f3bf 8f4f 	dsb	sy
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	e7fe      	b.n	8001768 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800176a:	4b29      	ldr	r3, [pc, #164]	; (8001810 <vTaskDelayUntil+0xe8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d009      	beq.n	8001786 <vTaskDelayUntil+0x5e>
 8001772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001776:	f383 8811 	msr	BASEPRI, r3
 800177a:	f3bf 8f6f 	isb	sy
 800177e:	f3bf 8f4f 	dsb	sy
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e7fe      	b.n	8001784 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8001786:	f000 f9e7 	bl	8001b58 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800178a:	4b22      	ldr	r3, [pc, #136]	; (8001814 <vTaskDelayUntil+0xec>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4413      	add	r3, r2
 8001798:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d90b      	bls.n	80017bc <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d911      	bls.n	80017d2 <vTaskDelayUntil+0xaa>
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	6a3b      	ldr	r3, [r7, #32]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d90d      	bls.n	80017d2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80017b6:	2301      	movs	r3, #1
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ba:	e00a      	b.n	80017d2 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d803      	bhi.n	80017ce <vTaskDelayUntil+0xa6>
 80017c6:	69fa      	ldr	r2, [r7, #28]
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d901      	bls.n	80017d2 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 80017ce:	2301      	movs	r3, #1
 80017d0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d006      	beq.n	80017ec <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	6a3b      	ldr	r3, [r7, #32]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fee2 	bl	80025b0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80017ec:	f000 f9c2 	bl	8001b74 <xTaskResumeAll>
 80017f0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d107      	bne.n	8001808 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <vTaskDelayUntil+0xf0>)
 80017fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	f3bf 8f4f 	dsb	sy
 8001804:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001808:	bf00      	nop
 800180a:	3728      	adds	r7, #40	; 0x28
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20001db8 	.word	0x20001db8
 8001814:	20001d94 	.word	0x20001d94
 8001818:	e000ed04 	.word	0xe000ed04

0800181c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d016      	beq.n	800185c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <vTaskDelay+0x60>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <vTaskDelay+0x2e>
 8001836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800183a:	f383 8811 	msr	BASEPRI, r3
 800183e:	f3bf 8f6f 	isb	sy
 8001842:	f3bf 8f4f 	dsb	sy
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	e7fe      	b.n	8001848 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800184a:	f000 f985 	bl	8001b58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800184e:	2100      	movs	r1, #0
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 fead 	bl	80025b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001856:	f000 f98d 	bl	8001b74 <xTaskResumeAll>
 800185a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d107      	bne.n	8001872 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8001862:	4b07      	ldr	r3, [pc, #28]	; (8001880 <vTaskDelay+0x64>)
 8001864:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	f3bf 8f4f 	dsb	sy
 800186e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20001db8 	.word	0x20001db8
 8001880:	e000ed04 	.word	0xe000ed04

08001884 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800188c:	f7fe fe58 	bl	8000540 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d102      	bne.n	800189c <vTaskSuspend+0x18>
 8001896:	4b37      	ldr	r3, [pc, #220]	; (8001974 <vTaskSuspend+0xf0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	e000      	b.n	800189e <vTaskSuspend+0x1a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	3304      	adds	r3, #4
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fd1d 	bl	80002e4 <uxListRemove>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d115      	bne.n	80018dc <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b4:	4930      	ldr	r1, [pc, #192]	; (8001978 <vTaskSuspend+0xf4>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <vTaskSuspend+0x58>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	2201      	movs	r2, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43da      	mvns	r2, r3
 80018d2:	4b2a      	ldr	r3, [pc, #168]	; (800197c <vTaskSuspend+0xf8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4013      	ands	r3, r2
 80018d8:	4a28      	ldr	r2, [pc, #160]	; (800197c <vTaskSuspend+0xf8>)
 80018da:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d004      	beq.n	80018ee <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	3318      	adds	r3, #24
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fcfb 	bl	80002e4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3304      	adds	r3, #4
 80018f2:	4619      	mov	r1, r3
 80018f4:	4822      	ldr	r0, [pc, #136]	; (8001980 <vTaskSuspend+0xfc>)
 80018f6:	f7fe fc98 	bl	800022a <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 80018fa:	f7fe fe4f 	bl	800059c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <vTaskSuspend+0x100>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d005      	beq.n	8001912 <vTaskSuspend+0x8e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001906:	f7fe fe1b 	bl	8000540 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800190a:	f000 fcff 	bl	800230c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800190e:	f7fe fe45 	bl	800059c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <vTaskSuspend+0xf0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	429a      	cmp	r2, r3
 800191a:	d126      	bne.n	800196a <vTaskSuspend+0xe6>
		{
			if( xSchedulerRunning != pdFALSE )
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <vTaskSuspend+0x100>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d016      	beq.n	8001952 <vTaskSuspend+0xce>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001924:	4b18      	ldr	r3, [pc, #96]	; (8001988 <vTaskSuspend+0x104>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d009      	beq.n	8001940 <vTaskSuspend+0xbc>
 800192c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001930:	f383 8811 	msr	BASEPRI, r3
 8001934:	f3bf 8f6f 	isb	sy
 8001938:	f3bf 8f4f 	dsb	sy
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	e7fe      	b.n	800193e <vTaskSuspend+0xba>
				portYIELD_WITHIN_API();
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <vTaskSuspend+0x108>)
 8001942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	f3bf 8f4f 	dsb	sy
 800194c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001950:	e00b      	b.n	800196a <vTaskSuspend+0xe6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <vTaskSuspend+0xfc>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <vTaskSuspend+0x10c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d103      	bne.n	8001966 <vTaskSuspend+0xe2>
					pxCurrentTCB = NULL;
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <vTaskSuspend+0xf0>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
	}
 8001964:	e001      	b.n	800196a <vTaskSuspend+0xe6>
					vTaskSwitchContext();
 8001966:	f000 fa6d 	bl	8001e44 <vTaskSwitchContext>
	}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20001cb8 	.word	0x20001cb8
 8001978:	20001cbc 	.word	0x20001cbc
 800197c:	20001d98 	.word	0x20001d98
 8001980:	20001d7c 	.word	0x20001d7c
 8001984:	20001d9c 	.word	0x20001d9c
 8001988:	20001db8 	.word	0x20001db8
 800198c:	e000ed04 	.word	0xe000ed04
 8001990:	20001d90 	.word	0x20001d90

08001994 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d109      	bne.n	80019be <prvTaskIsTaskSuspended+0x2a>
 80019aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ae:	f383 8811 	msr	BASEPRI, r3
 80019b2:	f3bf 8f6f 	isb	sy
 80019b6:	f3bf 8f4f 	dsb	sy
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e7fe      	b.n	80019bc <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	4a0f      	ldr	r2, [pc, #60]	; (8001a00 <prvTaskIsTaskSuspended+0x6c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d101      	bne.n	80019cc <prvTaskIsTaskSuspended+0x38>
 80019c8:	2301      	movs	r3, #1
 80019ca:	e000      	b.n	80019ce <prvTaskIsTaskSuspended+0x3a>
 80019cc:	2300      	movs	r3, #0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00f      	beq.n	80019f2 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <prvTaskIsTaskSuspended+0x70>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00a      	beq.n	80019f2 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <prvTaskIsTaskSuspended+0x54>
 80019e4:	2301      	movs	r3, #1
 80019e6:	e000      	b.n	80019ea <prvTaskIsTaskSuspended+0x56>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 80019ee:	2301      	movs	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80019f2:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80019f4:	4618      	mov	r0, r3
 80019f6:	371c      	adds	r7, #28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	20001d7c 	.word	0x20001d7c
 8001a04:	20001d50 	.word	0x20001d50

08001a08 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d109      	bne.n	8001a2e <vTaskResume+0x26>
 8001a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1e:	f383 8811 	msr	BASEPRI, r3
 8001a22:	f3bf 8f6f 	isb	sy
 8001a26:	f3bf 8f4f 	dsb	sy
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	e7fe      	b.n	8001a2c <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d039      	beq.n	8001aa8 <vTaskResume+0xa0>
 8001a34:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <vTaskResume+0xa8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d034      	beq.n	8001aa8 <vTaskResume+0xa0>
		{
			taskENTER_CRITICAL();
 8001a3e:	f7fe fd7f 	bl	8000540 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f7ff ffa6 	bl	8001994 <prvTaskIsTaskSuspended>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d02a      	beq.n	8001aa4 <vTaskResume+0x9c>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3304      	adds	r3, #4
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fc46 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <vTaskResume+0xac>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <vTaskResume+0xac>)
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <vTaskResume+0xb0>)
 8001a78:	441a      	add	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f7fe fbd2 	bl	800022a <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a8a:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <vTaskResume+0xa8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d307      	bcc.n	8001aa4 <vTaskResume+0x9c>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <vTaskResume+0xb4>)
 8001a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f3bf 8f4f 	dsb	sy
 8001aa0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8001aa4:	f7fe fd7a 	bl	800059c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20001cb8 	.word	0x20001cb8
 8001ab4:	20001d98 	.word	0x20001d98
 8001ab8:	20001cbc 	.word	0x20001cbc
 8001abc:	e000ed04 	.word	0xe000ed04

08001ac0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <vTaskStartScheduler+0x80>)
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	2300      	movs	r3, #0
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	2264      	movs	r2, #100	; 0x64
 8001ad2:	491c      	ldr	r1, [pc, #112]	; (8001b44 <vTaskStartScheduler+0x84>)
 8001ad4:	481c      	ldr	r0, [pc, #112]	; (8001b48 <vTaskStartScheduler+0x88>)
 8001ad6:	f7ff fcf5 	bl	80014c4 <xTaskCreate>
 8001ada:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d102      	bne.n	8001ae8 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8001ae2:	f000 fdcb 	bl	800267c <xTimerCreateTimerTask>
 8001ae6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d115      	bne.n	8001b1a <vTaskStartScheduler+0x5a>
 8001aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af2:	f383 8811 	msr	BASEPRI, r3
 8001af6:	f3bf 8f6f 	isb	sy
 8001afa:	f3bf 8f4f 	dsb	sy
 8001afe:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <vTaskStartScheduler+0x8c>)
 8001b02:	f04f 32ff 	mov.w	r2, #4294967295
 8001b06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <vTaskStartScheduler+0x90>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <vTaskStartScheduler+0x94>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001b14:	f7fe fc88 	bl	8000428 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001b18:	e00d      	b.n	8001b36 <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d109      	bne.n	8001b36 <vTaskStartScheduler+0x76>
 8001b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b26:	f383 8811 	msr	BASEPRI, r3
 8001b2a:	f3bf 8f6f 	isb	sy
 8001b2e:	f3bf 8f4f 	dsb	sy
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	e7fe      	b.n	8001b34 <vTaskStartScheduler+0x74>
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20001db4 	.word	0x20001db4
 8001b44:	08004858 	.word	0x08004858
 8001b48:	080021c1 	.word	0x080021c1
 8001b4c:	20001db0 	.word	0x20001db0
 8001b50:	20001d9c 	.word	0x20001d9c
 8001b54:	20001d94 	.word	0x20001d94

08001b58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <vTaskSuspendAll+0x18>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	3301      	adds	r3, #1
 8001b62:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <vTaskSuspendAll+0x18>)
 8001b64:	6013      	str	r3, [r2, #0]
}
 8001b66:	bf00      	nop
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	20001db8 	.word	0x20001db8

08001b74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001b82:	4b41      	ldr	r3, [pc, #260]	; (8001c88 <xTaskResumeAll+0x114>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d109      	bne.n	8001b9e <xTaskResumeAll+0x2a>
 8001b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b8e:	f383 8811 	msr	BASEPRI, r3
 8001b92:	f3bf 8f6f 	isb	sy
 8001b96:	f3bf 8f4f 	dsb	sy
 8001b9a:	603b      	str	r3, [r7, #0]
 8001b9c:	e7fe      	b.n	8001b9c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001b9e:	f7fe fccf 	bl	8000540 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001ba2:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <xTaskResumeAll+0x114>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	4a37      	ldr	r2, [pc, #220]	; (8001c88 <xTaskResumeAll+0x114>)
 8001baa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bac:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <xTaskResumeAll+0x114>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d161      	bne.n	8001c78 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <xTaskResumeAll+0x118>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d05d      	beq.n	8001c78 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bbc:	e02e      	b.n	8001c1c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001bbe:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <xTaskResumeAll+0x11c>)
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	3318      	adds	r3, #24
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fb8a 	bl	80002e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fb85 	bl	80002e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	2201      	movs	r2, #1
 8001be0:	409a      	lsls	r2, r3
 8001be2:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <xTaskResumeAll+0x120>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	4a2a      	ldr	r2, [pc, #168]	; (8001c94 <xTaskResumeAll+0x120>)
 8001bea:	6013      	str	r3, [r2, #0]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4a27      	ldr	r2, [pc, #156]	; (8001c98 <xTaskResumeAll+0x124>)
 8001bfa:	441a      	add	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3304      	adds	r3, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f7fe fb11 	bl	800022a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <xTaskResumeAll+0x128>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d302      	bcc.n	8001c1c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <xTaskResumeAll+0x12c>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c1c:	4b1c      	ldr	r3, [pc, #112]	; (8001c90 <xTaskResumeAll+0x11c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1cc      	bne.n	8001bbe <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001c2a:	f000 fb6f 	bl	800230c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001c2e:	4b1d      	ldr	r3, [pc, #116]	; (8001ca4 <xTaskResumeAll+0x130>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d010      	beq.n	8001c5c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001c3a:	f000 f847 	bl	8001ccc <xTaskIncrementTick>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001c44:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <xTaskResumeAll+0x12c>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f1      	bne.n	8001c3a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <xTaskResumeAll+0x130>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <xTaskResumeAll+0x12c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001c64:	2301      	movs	r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <xTaskResumeAll+0x134>)
 8001c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001c78:	f7fe fc90 	bl	800059c <vPortExitCritical>

	return xAlreadyYielded;
 8001c7c:	68bb      	ldr	r3, [r7, #8]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20001db8 	.word	0x20001db8
 8001c8c:	20001d90 	.word	0x20001d90
 8001c90:	20001d50 	.word	0x20001d50
 8001c94:	20001d98 	.word	0x20001d98
 8001c98:	20001cbc 	.word	0x20001cbc
 8001c9c:	20001cb8 	.word	0x20001cb8
 8001ca0:	20001da4 	.word	0x20001da4
 8001ca4:	20001da0 	.word	0x20001da0
 8001ca8:	e000ed04 	.word	0xe000ed04

08001cac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8001cb2:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <xTaskGetTickCount+0x1c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20001d94 	.word	0x20001d94

08001ccc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cd6:	4b50      	ldr	r3, [pc, #320]	; (8001e18 <xTaskIncrementTick+0x14c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f040 808c 	bne.w	8001df8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8001ce0:	4b4e      	ldr	r3, [pc, #312]	; (8001e1c <xTaskIncrementTick+0x150>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	; (8001e1c <xTaskIncrementTick+0x150>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d11f      	bne.n	8001d34 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001cf4:	4b4a      	ldr	r3, [pc, #296]	; (8001e20 <xTaskIncrementTick+0x154>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <xTaskIncrementTick+0x46>
 8001cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d02:	f383 8811 	msr	BASEPRI, r3
 8001d06:	f3bf 8f6f 	isb	sy
 8001d0a:	f3bf 8f4f 	dsb	sy
 8001d0e:	603b      	str	r3, [r7, #0]
 8001d10:	e7fe      	b.n	8001d10 <xTaskIncrementTick+0x44>
 8001d12:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <xTaskIncrementTick+0x154>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <xTaskIncrementTick+0x158>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a40      	ldr	r2, [pc, #256]	; (8001e20 <xTaskIncrementTick+0x154>)
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	4a40      	ldr	r2, [pc, #256]	; (8001e24 <xTaskIncrementTick+0x158>)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	4b40      	ldr	r3, [pc, #256]	; (8001e28 <xTaskIncrementTick+0x15c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	4a3e      	ldr	r2, [pc, #248]	; (8001e28 <xTaskIncrementTick+0x15c>)
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	f000 faec 	bl	800230c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d34:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <xTaskIncrementTick+0x160>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d34d      	bcc.n	8001dda <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d3e:	4b38      	ldr	r3, [pc, #224]	; (8001e20 <xTaskIncrementTick+0x154>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <xTaskIncrementTick+0x80>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <xTaskIncrementTick+0x82>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d004      	beq.n	8001d5c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d52:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <xTaskIncrementTick+0x160>)
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	601a      	str	r2, [r3, #0]
					break;
 8001d5a:	e03e      	b.n	8001dda <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <xTaskIncrementTick+0x154>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d203      	bcs.n	8001d7c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001d74:	4a2d      	ldr	r2, [pc, #180]	; (8001e2c <xTaskIncrementTick+0x160>)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6013      	str	r3, [r2, #0]
						break;
 8001d7a:	e02e      	b.n	8001dda <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe faaf 	bl	80002e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3318      	adds	r3, #24
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe faa6 	bl	80002e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <xTaskIncrementTick+0x164>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <xTaskIncrementTick+0x164>)
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4a1f      	ldr	r2, [pc, #124]	; (8001e34 <xTaskIncrementTick+0x168>)
 8001db8:	441a      	add	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	f7fe fa32 	bl	800022a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <xTaskIncrementTick+0x16c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d3b4      	bcc.n	8001d3e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001dd8:	e7b1      	b.n	8001d3e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001dda:	4b17      	ldr	r3, [pc, #92]	; (8001e38 <xTaskIncrementTick+0x16c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de0:	4914      	ldr	r1, [pc, #80]	; (8001e34 <xTaskIncrementTick+0x168>)
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d907      	bls.n	8001e02 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8001df2:	2301      	movs	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e004      	b.n	8001e02 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <xTaskIncrementTick+0x170>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <xTaskIncrementTick+0x170>)
 8001e00:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001e02:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <xTaskIncrementTick+0x174>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8001e0e:	697b      	ldr	r3, [r7, #20]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20001db8 	.word	0x20001db8
 8001e1c:	20001d94 	.word	0x20001d94
 8001e20:	20001d48 	.word	0x20001d48
 8001e24:	20001d4c 	.word	0x20001d4c
 8001e28:	20001da8 	.word	0x20001da8
 8001e2c:	20001db0 	.word	0x20001db0
 8001e30:	20001d98 	.word	0x20001d98
 8001e34:	20001cbc 	.word	0x20001cbc
 8001e38:	20001cb8 	.word	0x20001cb8
 8001e3c:	20001da0 	.word	0x20001da0
 8001e40:	20001da4 	.word	0x20001da4

08001e44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b088      	sub	sp, #32
 8001e48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e4a:	4b39      	ldr	r3, [pc, #228]	; (8001f30 <vTaskSwitchContext+0xec>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001e52:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <vTaskSwitchContext+0xf0>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001e58:	e065      	b.n	8001f26 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8001e5a:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <vTaskSwitchContext+0xf0>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8001e60:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <vTaskSwitchContext+0xf4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d111      	bne.n	8001e9c <vTaskSwitchContext+0x58>
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d10b      	bne.n	8001e9c <vTaskSwitchContext+0x58>
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	3308      	adds	r3, #8
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d105      	bne.n	8001e9c <vTaskSwitchContext+0x58>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	330c      	adds	r3, #12
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d008      	beq.n	8001eae <vTaskSwitchContext+0x6a>
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <vTaskSwitchContext+0xf4>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <vTaskSwitchContext+0xf4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	3334      	adds	r3, #52	; 0x34
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f001 fbc0 	bl	800362e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <vTaskSwitchContext+0xf8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	f1c3 031f 	rsb	r3, r3, #31
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	491e      	ldr	r1, [pc, #120]	; (8001f40 <vTaskSwitchContext+0xfc>)
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <vTaskSwitchContext+0xa8>
	__asm volatile
 8001ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001edc:	f383 8811 	msr	BASEPRI, r3
 8001ee0:	f3bf 8f6f 	isb	sy
 8001ee4:	f3bf 8f4f 	dsb	sy
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	e7fe      	b.n	8001eea <vTaskSwitchContext+0xa6>
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <vTaskSwitchContext+0xfc>)
 8001ef8:	4413      	add	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	3308      	adds	r3, #8
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d104      	bne.n	8001f1c <vTaskSwitchContext+0xd8>
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <vTaskSwitchContext+0xf4>)
 8001f24:	6013      	str	r3, [r2, #0]
}
 8001f26:	bf00      	nop
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20001db8 	.word	0x20001db8
 8001f34:	20001da4 	.word	0x20001da4
 8001f38:	20001cb8 	.word	0x20001cb8
 8001f3c:	20001d98 	.word	0x20001d98
 8001f40:	20001cbc 	.word	0x20001cbc

08001f44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <vTaskPlaceOnEventList+0x24>
 8001f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f58:	f383 8811 	msr	BASEPRI, r3
 8001f5c:	f3bf 8f6f 	isb	sy
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	e7fe      	b.n	8001f66 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <vTaskPlaceOnEventList+0x44>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	3318      	adds	r3, #24
 8001f6e:	4619      	mov	r1, r3
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe f97e 	bl	8000272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001f76:	2101      	movs	r1, #1
 8001f78:	6838      	ldr	r0, [r7, #0]
 8001f7a:	f000 fb19 	bl	80025b0 <prvAddCurrentTaskToDelayedList>
}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20001cb8 	.word	0x20001cb8

08001f8c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d109      	bne.n	8001fb2 <vTaskPlaceOnEventListRestricted+0x26>
 8001f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa2:	f383 8811 	msr	BASEPRI, r3
 8001fa6:	f3bf 8f6f 	isb	sy
 8001faa:	f3bf 8f4f 	dsb	sy
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	e7fe      	b.n	8001fb0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001fb2:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <vTaskPlaceOnEventListRestricted+0x50>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	3318      	adds	r3, #24
 8001fb8:	4619      	mov	r1, r3
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7fe f935 	bl	800022a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8001fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	68b8      	ldr	r0, [r7, #8]
 8001fd0:	f000 faee 	bl	80025b0 <prvAddCurrentTaskToDelayedList>
	}
 8001fd4:	bf00      	nop
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20001cb8 	.word	0x20001cb8

08001fe0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <xTaskRemoveFromEventList+0x2a>
 8001ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ffa:	f383 8811 	msr	BASEPRI, r3
 8001ffe:	f3bf 8f6f 	isb	sy
 8002002:	f3bf 8f4f 	dsb	sy
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e7fe      	b.n	8002008 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	3318      	adds	r3, #24
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe f968 	bl	80002e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002014:	4b1d      	ldr	r3, [pc, #116]	; (800208c <xTaskRemoveFromEventList+0xac>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d11c      	bne.n	8002056 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	3304      	adds	r3, #4
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe f95f 	bl	80002e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	2201      	movs	r2, #1
 800202c:	409a      	lsls	r2, r3
 800202e:	4b18      	ldr	r3, [pc, #96]	; (8002090 <xTaskRemoveFromEventList+0xb0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4313      	orrs	r3, r2
 8002034:	4a16      	ldr	r2, [pc, #88]	; (8002090 <xTaskRemoveFromEventList+0xb0>)
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800203c:	4613      	mov	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4a13      	ldr	r2, [pc, #76]	; (8002094 <xTaskRemoveFromEventList+0xb4>)
 8002046:	441a      	add	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	3304      	adds	r3, #4
 800204c:	4619      	mov	r1, r3
 800204e:	4610      	mov	r0, r2
 8002050:	f7fe f8eb 	bl	800022a <vListInsertEnd>
 8002054:	e005      	b.n	8002062 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	3318      	adds	r3, #24
 800205a:	4619      	mov	r1, r3
 800205c:	480e      	ldr	r0, [pc, #56]	; (8002098 <xTaskRemoveFromEventList+0xb8>)
 800205e:	f7fe f8e4 	bl	800022a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <xTaskRemoveFromEventList+0xbc>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	429a      	cmp	r2, r3
 800206e:	d905      	bls.n	800207c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8002070:	2301      	movs	r3, #1
 8002072:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <xTaskRemoveFromEventList+0xc0>)
 8002076:	2201      	movs	r2, #1
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	e001      	b.n	8002080 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8002080:	697b      	ldr	r3, [r7, #20]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3718      	adds	r7, #24
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20001db8 	.word	0x20001db8
 8002090:	20001d98 	.word	0x20001d98
 8002094:	20001cbc 	.word	0x20001cbc
 8002098:	20001d50 	.word	0x20001d50
 800209c:	20001cb8 	.word	0x20001cb8
 80020a0:	20001da4 	.word	0x20001da4

080020a4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <vTaskSetTimeOutState+0x22>
 80020b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b6:	f383 8811 	msr	BASEPRI, r3
 80020ba:	f3bf 8f6f 	isb	sy
 80020be:	f3bf 8f4f 	dsb	sy
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	e7fe      	b.n	80020c4 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <vTaskSetTimeOutState+0x40>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <vTaskSetTimeOutState+0x44>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	605a      	str	r2, [r3, #4]
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20001da8 	.word	0x20001da8
 80020e8:	20001d94 	.word	0x20001d94

080020ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d109      	bne.n	8002110 <xTaskCheckForTimeOut+0x24>
 80020fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002100:	f383 8811 	msr	BASEPRI, r3
 8002104:	f3bf 8f6f 	isb	sy
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	e7fe      	b.n	800210e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <xTaskCheckForTimeOut+0x3e>
 8002116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800211a:	f383 8811 	msr	BASEPRI, r3
 800211e:	f3bf 8f6f 	isb	sy
 8002122:	f3bf 8f4f 	dsb	sy
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	e7fe      	b.n	8002128 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800212a:	f7fe fa09 	bl	8000540 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <xTaskCheckForTimeOut+0xb4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800213c:	d102      	bne.n	8002144 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	e026      	b.n	8002192 <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <xTaskCheckForTimeOut+0xb8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	429a      	cmp	r2, r3
 800214e:	d007      	beq.n	8002160 <xTaskCheckForTimeOut+0x74>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	429a      	cmp	r2, r3
 8002158:	d802      	bhi.n	8002160 <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800215a:	2301      	movs	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e018      	b.n	8002192 <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	1ad2      	subs	r2, r2, r3
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d20e      	bcs.n	800218e <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1acb      	subs	r3, r1, r3
 800217c:	441a      	add	r2, r3
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ff8e 	bl	80020a4 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
 800218c:	e001      	b.n	8002192 <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 800218e:	2301      	movs	r3, #1
 8002190:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8002192:	f7fe fa03 	bl	800059c <vPortExitCritical>

	return xReturn;
 8002196:	697b      	ldr	r3, [r7, #20]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20001d94 	.word	0x20001d94
 80021a4:	20001da8 	.word	0x20001da8

080021a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <vTaskMissedYield+0x14>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
}
 80021b2:	bf00      	nop
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	20001da4 	.word	0x20001da4

080021c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80021c8:	f000 f854 	bl	8002274 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021cc:	4b07      	ldr	r3, [pc, #28]	; (80021ec <prvIdleTask+0x2c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d907      	bls.n	80021e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <prvIdleTask+0x30>)
 80021d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	f3bf 8f4f 	dsb	sy
 80021e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80021e4:	f001 fa29 	bl	800363a <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80021e8:	e7ee      	b.n	80021c8 <prvIdleTask+0x8>
 80021ea:	bf00      	nop
 80021ec:	20001cbc 	.word	0x20001cbc
 80021f0:	e000ed04 	.word	0xe000ed04

080021f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	e00c      	b.n	800221a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <prvInitialiseTaskLists+0x60>)
 800220c:	4413      	add	r3, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f7fd ffde 	bl	80001d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3301      	adds	r3, #1
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b04      	cmp	r3, #4
 800221e:	d9ef      	bls.n	8002200 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002220:	480d      	ldr	r0, [pc, #52]	; (8002258 <prvInitialiseTaskLists+0x64>)
 8002222:	f7fd ffd5 	bl	80001d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002226:	480d      	ldr	r0, [pc, #52]	; (800225c <prvInitialiseTaskLists+0x68>)
 8002228:	f7fd ffd2 	bl	80001d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <prvInitialiseTaskLists+0x6c>)
 800222e:	f7fd ffcf 	bl	80001d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002232:	480c      	ldr	r0, [pc, #48]	; (8002264 <prvInitialiseTaskLists+0x70>)
 8002234:	f7fd ffcc 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002238:	480b      	ldr	r0, [pc, #44]	; (8002268 <prvInitialiseTaskLists+0x74>)
 800223a:	f7fd ffc9 	bl	80001d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <prvInitialiseTaskLists+0x78>)
 8002240:	4a05      	ldr	r2, [pc, #20]	; (8002258 <prvInitialiseTaskLists+0x64>)
 8002242:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <prvInitialiseTaskLists+0x7c>)
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <prvInitialiseTaskLists+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20001cbc 	.word	0x20001cbc
 8002258:	20001d20 	.word	0x20001d20
 800225c:	20001d34 	.word	0x20001d34
 8002260:	20001d50 	.word	0x20001d50
 8002264:	20001d64 	.word	0x20001d64
 8002268:	20001d7c 	.word	0x20001d7c
 800226c:	20001d48 	.word	0x20001d48
 8002270:	20001d4c 	.word	0x20001d4c

08002274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800227a:	e028      	b.n	80022ce <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800227c:	f7ff fc6c 	bl	8001b58 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002280:	4b17      	ldr	r3, [pc, #92]	; (80022e0 <prvCheckTasksWaitingTermination+0x6c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8002290:	f7ff fc70 	bl	8001b74 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d119      	bne.n	80022ce <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800229a:	f7fe f951 	bl	8000540 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <prvCheckTasksWaitingTermination+0x6c>)
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	3304      	adds	r3, #4
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f81a 	bl	80002e4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <prvCheckTasksWaitingTermination+0x70>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	4a0b      	ldr	r2, [pc, #44]	; (80022e4 <prvCheckTasksWaitingTermination+0x70>)
 80022b8:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <prvCheckTasksWaitingTermination+0x74>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3b01      	subs	r3, #1
 80022c0:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <prvCheckTasksWaitingTermination+0x74>)
 80022c2:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 80022c4:	f7fe f96a 	bl	800059c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 80022c8:	6838      	ldr	r0, [r7, #0]
 80022ca:	f000 f80f 	bl	80022ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <prvCheckTasksWaitingTermination+0x74>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1d2      	bne.n	800227c <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20001d64 	.word	0x20001d64
 80022e4:	20001d90 	.word	0x20001d90
 80022e8:	20001d78 	.word	0x20001d78

080022ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe faf7 	bl	80008ec <vPortFree>
			vPortFree( pxTCB );
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe faf4 	bl	80008ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002304:	bf00      	nop
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002312:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <prvResetNextTaskUnblockTime+0x44>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <prvResetNextTaskUnblockTime+0x14>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <prvResetNextTaskUnblockTime+0x16>
 8002320:	2300      	movs	r3, #0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d004      	beq.n	8002330 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002326:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <prvResetNextTaskUnblockTime+0x48>)
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800232e:	e008      	b.n	8002342 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <prvResetNextTaskUnblockTime+0x44>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <prvResetNextTaskUnblockTime+0x48>)
 8002340:	6013      	str	r3, [r2, #0]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20001d48 	.word	0x20001d48
 8002354:	20001db0 	.word	0x20001db0

08002358 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <xTaskGetSchedulerState+0x34>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d102      	bne.n	800236c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002366:	2301      	movs	r3, #1
 8002368:	607b      	str	r3, [r7, #4]
 800236a:	e008      	b.n	800237e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800236c:	4b08      	ldr	r3, [pc, #32]	; (8002390 <xTaskGetSchedulerState+0x38>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002374:	2302      	movs	r3, #2
 8002376:	607b      	str	r3, [r7, #4]
 8002378:	e001      	b.n	800237e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800237a:	2300      	movs	r3, #0
 800237c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800237e:	687b      	ldr	r3, [r7, #4]
	}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	20001d9c 	.word	0x20001d9c
 8002390:	20001db8 	.word	0x20001db8

08002394 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d062      	beq.n	800246c <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023aa:	4b32      	ldr	r3, [pc, #200]	; (8002474 <vTaskPriorityInherit+0xe0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d25b      	bcs.n	800246c <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	db06      	blt.n	80023ca <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <vTaskPriorityInherit+0xe0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	f1c3 0205 	rsb	r2, r3, #5
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6959      	ldr	r1, [r3, #20]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d2:	4613      	mov	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4a27      	ldr	r2, [pc, #156]	; (8002478 <vTaskPriorityInherit+0xe4>)
 80023dc:	4413      	add	r3, r2
 80023de:	4299      	cmp	r1, r3
 80023e0:	d101      	bne.n	80023e6 <vTaskPriorityInherit+0x52>
 80023e2:	2301      	movs	r3, #1
 80023e4:	e000      	b.n	80023e8 <vTaskPriorityInherit+0x54>
 80023e6:	2300      	movs	r3, #0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d03a      	beq.n	8002462 <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	3304      	adds	r3, #4
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7fd ff77 	bl	80002e4 <uxListRemove>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d115      	bne.n	8002428 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002400:	491d      	ldr	r1, [pc, #116]	; (8002478 <vTaskPriorityInherit+0xe4>)
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10a      	bne.n	8002428 <vTaskPriorityInherit+0x94>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	2201      	movs	r2, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	43da      	mvns	r2, r3
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <vTaskPriorityInherit+0xe8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4013      	ands	r3, r2
 8002424:	4a15      	ldr	r2, [pc, #84]	; (800247c <vTaskPriorityInherit+0xe8>)
 8002426:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <vTaskPriorityInherit+0xe0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	2201      	movs	r2, #1
 8002438:	409a      	lsls	r2, r3
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <vTaskPriorityInherit+0xe8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	4a0e      	ldr	r2, [pc, #56]	; (800247c <vTaskPriorityInherit+0xe8>)
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4a09      	ldr	r2, [pc, #36]	; (8002478 <vTaskPriorityInherit+0xe4>)
 8002452:	441a      	add	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3304      	adds	r3, #4
 8002458:	4619      	mov	r1, r3
 800245a:	4610      	mov	r0, r2
 800245c:	f7fd fee5 	bl	800022a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002460:	e004      	b.n	800246c <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002462:	4b04      	ldr	r3, [pc, #16]	; (8002474 <vTaskPriorityInherit+0xe0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800246c:	bf00      	nop
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20001cb8 	.word	0x20001cb8
 8002478:	20001cbc 	.word	0x20001cbc
 800247c:	20001d98 	.word	0x20001d98

08002480 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d06c      	beq.n	8002570 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8002496:	4b39      	ldr	r3, [pc, #228]	; (800257c <xTaskPriorityDisinherit+0xfc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	429a      	cmp	r2, r3
 800249e:	d009      	beq.n	80024b4 <xTaskPriorityDisinherit+0x34>
 80024a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a4:	f383 8811 	msr	BASEPRI, r3
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	f3bf 8f4f 	dsb	sy
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	e7fe      	b.n	80024b2 <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d109      	bne.n	80024d0 <xTaskPriorityDisinherit+0x50>
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	e7fe      	b.n	80024ce <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	1e5a      	subs	r2, r3, #1
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	645a      	str	r2, [r3, #68]	; 0x44

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d044      	beq.n	8002570 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d140      	bne.n	8002570 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	3304      	adds	r3, #4
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fd fef6 	bl	80002e4 <uxListRemove>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d115      	bne.n	800252a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002502:	491f      	ldr	r1, [pc, #124]	; (8002580 <xTaskPriorityDisinherit+0x100>)
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <xTaskPriorityDisinherit+0xaa>
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	2201      	movs	r2, #1
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	43da      	mvns	r2, r3
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <xTaskPriorityDisinherit+0x104>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4013      	ands	r3, r2
 8002526:	4a17      	ldr	r2, [pc, #92]	; (8002584 <xTaskPriorityDisinherit+0x104>)
 8002528:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	f1c3 0205 	rsb	r2, r3, #5
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	2201      	movs	r2, #1
 8002544:	409a      	lsls	r2, r3
 8002546:	4b0f      	ldr	r3, [pc, #60]	; (8002584 <xTaskPriorityDisinherit+0x104>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <xTaskPriorityDisinherit+0x104>)
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002554:	4613      	mov	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	4a08      	ldr	r2, [pc, #32]	; (8002580 <xTaskPriorityDisinherit+0x100>)
 800255e:	441a      	add	r2, r3
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	3304      	adds	r3, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4610      	mov	r0, r2
 8002568:	f7fd fe5f 	bl	800022a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800256c:	2301      	movs	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8002570:	697b      	ldr	r3, [r7, #20]
	}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20001cb8 	.word	0x20001cb8
 8002580:	20001cbc 	.word	0x20001cbc
 8002584:	20001d98 	.word	0x20001d98

08002588 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800258c:	4b07      	ldr	r3, [pc, #28]	; (80025ac <pvTaskIncrementMutexHeldCount+0x24>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <pvTaskIncrementMutexHeldCount+0x24>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800259a:	3201      	adds	r2, #1
 800259c:	645a      	str	r2, [r3, #68]	; 0x44
		}

		return pxCurrentTCB;
 800259e:	4b03      	ldr	r3, [pc, #12]	; (80025ac <pvTaskIncrementMutexHeldCount+0x24>)
 80025a0:	681b      	ldr	r3, [r3, #0]
	}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	20001cb8 	.word	0x20001cb8

080025b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <prvAddCurrentTaskToDelayedList+0xb0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025c0:	4b28      	ldr	r3, [pc, #160]	; (8002664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	3304      	adds	r3, #4
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fd fe8c 	bl	80002e4 <uxListRemove>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10b      	bne.n	80025ea <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	2201      	movs	r2, #1
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	4b21      	ldr	r3, [pc, #132]	; (8002668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4013      	ands	r3, r2
 80025e6:	4a20      	ldr	r2, [pc, #128]	; (8002668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80025e8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d10a      	bne.n	8002608 <prvAddCurrentTaskToDelayedList+0x58>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025f8:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3304      	adds	r3, #4
 80025fe:	4619      	mov	r1, r3
 8002600:	481a      	ldr	r0, [pc, #104]	; (800266c <prvAddCurrentTaskToDelayedList+0xbc>)
 8002602:	f7fd fe12 	bl	800022a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002606:	e026      	b.n	8002656 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002618:	68ba      	ldr	r2, [r7, #8]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	429a      	cmp	r2, r3
 800261e:	d209      	bcs.n	8002634 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3304      	adds	r3, #4
 800262a:	4619      	mov	r1, r3
 800262c:	4610      	mov	r0, r2
 800262e:	f7fd fe20 	bl	8000272 <vListInsert>
}
 8002632:	e010      	b.n	8002656 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002634:	4b0f      	ldr	r3, [pc, #60]	; (8002674 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <prvAddCurrentTaskToDelayedList+0xb4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3304      	adds	r3, #4
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f7fd fe16 	bl	8000272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	429a      	cmp	r2, r3
 800264e:	d202      	bcs.n	8002656 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002650:	4a09      	ldr	r2, [pc, #36]	; (8002678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6013      	str	r3, [r2, #0]
}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20001d94 	.word	0x20001d94
 8002664:	20001cb8 	.word	0x20001cb8
 8002668:	20001d98 	.word	0x20001d98
 800266c:	20001d7c 	.word	0x20001d7c
 8002670:	20001d4c 	.word	0x20001d4c
 8002674:	20001d48 	.word	0x20001d48
 8002678:	20001db0 	.word	0x20001db0

0800267c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8002682:	2300      	movs	r3, #0
 8002684:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8002686:	f000 fa8d 	bl	8002ba4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800268a:	4b10      	ldr	r3, [pc, #64]	; (80026cc <xTimerCreateTimerTask+0x50>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <xTimerCreateTimerTask+0x2c>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <xTimerCreateTimerTask+0x54>)
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2303      	movs	r3, #3
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	2300      	movs	r3, #0
 800269c:	22c8      	movs	r2, #200	; 0xc8
 800269e:	490d      	ldr	r1, [pc, #52]	; (80026d4 <xTimerCreateTimerTask+0x58>)
 80026a0:	480d      	ldr	r0, [pc, #52]	; (80026d8 <xTimerCreateTimerTask+0x5c>)
 80026a2:	f7fe ff0f 	bl	80014c4 <xTaskCreate>
 80026a6:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <xTimerCreateTimerTask+0x46>
 80026ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b2:	f383 8811 	msr	BASEPRI, r3
 80026b6:	f3bf 8f6f 	isb	sy
 80026ba:	f3bf 8f4f 	dsb	sy
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	e7fe      	b.n	80026c0 <xTimerCreateTimerTask+0x44>
	return xReturn;
 80026c2:	687b      	ldr	r3, [r7, #4]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20001dec 	.word	0x20001dec
 80026d0:	20001df0 	.word	0x20001df0
 80026d4:	08004860 	.word	0x08004860
 80026d8:	080027f5 	.word	0x080027f5

080026dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
 80026e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <xTimerGenericCommand+0x2c>
 80026f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f8:	f383 8811 	msr	BASEPRI, r3
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	f3bf 8f4f 	dsb	sy
 8002704:	623b      	str	r3, [r7, #32]
 8002706:	e7fe      	b.n	8002706 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <xTimerGenericCommand+0x94>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d02a      	beq.n	8002766 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b05      	cmp	r3, #5
 8002720:	dc18      	bgt.n	8002754 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002722:	f7ff fe19 	bl	8002358 <xTaskGetSchedulerState>
 8002726:	4603      	mov	r3, r0
 8002728:	2b02      	cmp	r3, #2
 800272a:	d109      	bne.n	8002740 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <xTimerGenericCommand+0x94>)
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	f107 0114 	add.w	r1, r7, #20
 8002734:	2300      	movs	r3, #0
 8002736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002738:	f7fe fab8 	bl	8000cac <xQueueGenericSend>
 800273c:	6278      	str	r0, [r7, #36]	; 0x24
 800273e:	e012      	b.n	8002766 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <xTimerGenericCommand+0x94>)
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	f107 0114 	add.w	r1, r7, #20
 8002748:	2300      	movs	r3, #0
 800274a:	2200      	movs	r2, #0
 800274c:	f7fe faae 	bl	8000cac <xQueueGenericSend>
 8002750:	6278      	str	r0, [r7, #36]	; 0x24
 8002752:	e008      	b.n	8002766 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <xTimerGenericCommand+0x94>)
 8002756:	6818      	ldr	r0, [r3, #0]
 8002758:	f107 0114 	add.w	r1, r7, #20
 800275c:	2300      	movs	r3, #0
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	f7fe fb9e 	bl	8000ea0 <xQueueGenericSendFromISR>
 8002764:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002768:	4618      	mov	r0, r3
 800276a:	3728      	adds	r7, #40	; 0x28
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20001dec 	.word	0x20001dec

08002774 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af02      	add	r7, sp, #8
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800277e:	4b1c      	ldr	r3, [pc, #112]	; (80027f0 <prvProcessExpiredTimer+0x7c>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3304      	adds	r3, #4
 800278c:	4618      	mov	r0, r3
 800278e:	f7fd fda9 	bl	80002e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d121      	bne.n	80027de <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	18d1      	adds	r1, r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f000 f8c8 	bl	800293c <prvInsertTimerInActiveList>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d015      	beq.n	80027de <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80027b2:	2300      	movs	r3, #0
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2300      	movs	r3, #0
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	2100      	movs	r1, #0
 80027bc:	6978      	ldr	r0, [r7, #20]
 80027be:	f7ff ff8d 	bl	80026dc <xTimerGenericCommand>
 80027c2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <prvProcessExpiredTimer+0x6a>
 80027ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	e7fe      	b.n	80027dc <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	4798      	blx	r3
}
 80027e6:	bf00      	nop
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20001de4 	.word	0x20001de4

080027f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80027fc:	f107 0308 	add.w	r3, r7, #8
 8002800:	4618      	mov	r0, r3
 8002802:	f000 f857 	bl	80028b4 <prvGetNextExpireTime>
 8002806:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4619      	mov	r1, r3
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f803 	bl	8002818 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8002812:	f000 f8d5 	bl	80029c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002816:	e7f1      	b.n	80027fc <prvTimerTask+0x8>

08002818 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8002822:	f7ff f999 	bl	8001b58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f866 	bl	80028fc <prvSampleTimeNow>
 8002830:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d130      	bne.n	800289a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10a      	bne.n	8002854 <prvProcessTimerOrBlockTask+0x3c>
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	429a      	cmp	r2, r3
 8002844:	d806      	bhi.n	8002854 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8002846:	f7ff f995 	bl	8001b74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800284a:	68f9      	ldr	r1, [r7, #12]
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff91 	bl	8002774 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8002852:	e024      	b.n	800289e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800285a:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <prvProcessTimerOrBlockTask+0x90>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800286c:	4b0f      	ldr	r3, [pc, #60]	; (80028ac <prvProcessTimerOrBlockTask+0x94>)
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4619      	mov	r1, r3
 800287a:	f7fe fdef 	bl	800145c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800287e:	f7ff f979 	bl	8001b74 <xTaskResumeAll>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <prvProcessTimerOrBlockTask+0x98>)
 800288a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	f3bf 8f6f 	isb	sy
}
 8002898:	e001      	b.n	800289e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800289a:	f7ff f96b 	bl	8001b74 <xTaskResumeAll>
}
 800289e:	bf00      	nop
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20001de8 	.word	0x20001de8
 80028ac:	20001dec 	.word	0x20001dec
 80028b0:	e000ed04 	.word	0xe000ed04

080028b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <prvGetNextExpireTime+0x44>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d105      	bne.n	80028e6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <prvGetNextExpireTime+0x44>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	e001      	b.n	80028ea <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80028ea:	68fb      	ldr	r3, [r7, #12]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	20001de4 	.word	0x20001de4

080028fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8002904:	f7ff f9d2 	bl	8001cac <xTaskGetTickCount>
 8002908:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800290a:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <prvSampleTimeNow+0x3c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	429a      	cmp	r2, r3
 8002912:	d205      	bcs.n	8002920 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8002914:	f000 f8e6 	bl	8002ae4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	e002      	b.n	8002926 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8002926:	4a04      	ldr	r2, [pc, #16]	; (8002938 <prvSampleTimeNow+0x3c>)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800292c:	68fb      	ldr	r3, [r7, #12]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20001df4 	.word	0x20001df4

0800293c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	429a      	cmp	r2, r3
 8002960:	d812      	bhi.n	8002988 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	1ad2      	subs	r2, r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	429a      	cmp	r2, r3
 800296e:	d302      	bcc.n	8002976 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8002970:	2301      	movs	r3, #1
 8002972:	617b      	str	r3, [r7, #20]
 8002974:	e01b      	b.n	80029ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <prvInsertTimerInActiveList+0x7c>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	3304      	adds	r3, #4
 800297e:	4619      	mov	r1, r3
 8002980:	4610      	mov	r0, r2
 8002982:	f7fd fc76 	bl	8000272 <vListInsert>
 8002986:	e012      	b.n	80029ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d206      	bcs.n	800299e <prvInsertTimerInActiveList+0x62>
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d302      	bcc.n	800299e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8002998:	2301      	movs	r3, #1
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	e007      	b.n	80029ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <prvInsertTimerInActiveList+0x80>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	3304      	adds	r3, #4
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f7fd fc62 	bl	8000272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80029ae:	697b      	ldr	r3, [r7, #20]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	20001de8 	.word	0x20001de8
 80029bc:	20001de4 	.word	0x20001de4

080029c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08c      	sub	sp, #48	; 0x30
 80029c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80029c6:	e07a      	b.n	8002abe <prvProcessReceivedCommands+0xfe>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	db77      	blt.n	8002abe <prvProcessReceivedCommands+0xfe>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d004      	beq.n	80029e4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	3304      	adds	r3, #4
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fc80 	bl	80002e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff88 	bl	80028fc <prvSampleTimeNow>
 80029ec:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b09      	cmp	r3, #9
 80029f2:	d863      	bhi.n	8002abc <prvProcessReceivedCommands+0xfc>
 80029f4:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <prvProcessReceivedCommands+0x3c>)
 80029f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fa:	bf00      	nop
 80029fc:	08002a25 	.word	0x08002a25
 8002a00:	08002a25 	.word	0x08002a25
 8002a04:	08002a25 	.word	0x08002a25
 8002a08:	08002abf 	.word	0x08002abf
 8002a0c:	08002a7f 	.word	0x08002a7f
 8002a10:	08002ab5 	.word	0x08002ab5
 8002a14:	08002a25 	.word	0x08002a25
 8002a18:	08002a25 	.word	0x08002a25
 8002a1c:	08002abf 	.word	0x08002abf
 8002a20:	08002a7f 	.word	0x08002a7f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	18d1      	adds	r1, r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a3a      	ldr	r2, [r7, #32]
 8002a30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a32:	f7ff ff83 	bl	800293c <prvInsertTimerInActiveList>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d040      	beq.n	8002abe <prvProcessReceivedCommands+0xfe>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a42:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d138      	bne.n	8002abe <prvProcessReceivedCommands+0xfe>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	441a      	add	r2, r3
 8002a54:	2300      	movs	r3, #0
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a5e:	f7ff fe3d 	bl	80026dc <xTimerGenericCommand>
 8002a62:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d129      	bne.n	8002abe <prvProcessReceivedCommands+0xfe>
 8002a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6e:	f383 8811 	msr	BASEPRI, r3
 8002a72:	f3bf 8f6f 	isb	sy
 8002a76:	f3bf 8f4f 	dsb	sy
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	e7fe      	b.n	8002a7c <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <prvProcessReceivedCommands+0xe0>
 8002a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	e7fe      	b.n	8002a9e <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	18d1      	adds	r1, r2, r3
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	6a3a      	ldr	r2, [r7, #32]
 8002aac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002aae:	f7ff ff45 	bl	800293c <prvInsertTimerInActiveList>
					break;
 8002ab2:	e004      	b.n	8002abe <prvProcessReceivedCommands+0xfe>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
 8002ab4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ab6:	f7fd ff19 	bl	80008ec <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8002aba:	e000      	b.n	8002abe <prvProcessReceivedCommands+0xfe>

				default	:
					/* Don't expect to get here. */
					break;
 8002abc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <prvProcessReceivedCommands+0x120>)
 8002ac0:	6818      	ldr	r0, [r3, #0]
 8002ac2:	f107 0108 	add.w	r1, r7, #8
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f7fe fa7d 	bl	8000fc8 <xQueueGenericReceive>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f47f af79 	bne.w	80029c8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8002ad6:	bf00      	nop
 8002ad8:	3728      	adds	r7, #40	; 0x28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20001dec 	.word	0x20001dec

08002ae4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002aea:	e044      	b.n	8002b76 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <prvSwitchTimerLists+0xb8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002af6:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <prvSwitchTimerLists+0xb8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fbed 	bl	80002e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	6938      	ldr	r0, [r7, #16]
 8002b10:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d12d      	bne.n	8002b76 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	699a      	ldr	r2, [r3, #24]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	4413      	add	r3, r2
 8002b22:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d90e      	bls.n	8002b4a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <prvSwitchTimerLists+0xb8>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f7fd fb95 	bl	8000272 <vListInsert>
 8002b48:	e015      	b.n	8002b76 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	2100      	movs	r1, #0
 8002b54:	6938      	ldr	r0, [r7, #16]
 8002b56:	f7ff fdc1 	bl	80026dc <xTimerGenericCommand>
 8002b5a:	60b8      	str	r0, [r7, #8]
				configASSERT( xResult );
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <prvSwitchTimerLists+0x92>
 8002b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	e7fe      	b.n	8002b74 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002b76:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <prvSwitchTimerLists+0xb8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1b5      	bne.n	8002aec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8002b80:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <prvSwitchTimerLists+0xb8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <prvSwitchTimerLists+0xbc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <prvSwitchTimerLists+0xb8>)
 8002b8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <prvSwitchTimerLists+0xbc>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6013      	str	r3, [r2, #0]
}
 8002b94:	bf00      	nop
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20001de4 	.word	0x20001de4
 8002ba0:	20001de8 	.word	0x20001de8

08002ba4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8002ba8:	f7fd fcca 	bl	8000540 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8002bac:	4b12      	ldr	r3, [pc, #72]	; (8002bf8 <prvCheckForValidListAndQueue+0x54>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d11d      	bne.n	8002bf0 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002bb4:	4811      	ldr	r0, [pc, #68]	; (8002bfc <prvCheckForValidListAndQueue+0x58>)
 8002bb6:	f7fd fb0b 	bl	80001d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002bba:	4811      	ldr	r0, [pc, #68]	; (8002c00 <prvCheckForValidListAndQueue+0x5c>)
 8002bbc:	f7fd fb08 	bl	80001d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002bc0:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <prvCheckForValidListAndQueue+0x60>)
 8002bc2:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <prvCheckForValidListAndQueue+0x58>)
 8002bc4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002bc6:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <prvCheckForValidListAndQueue+0x64>)
 8002bc8:	4a0d      	ldr	r2, [pc, #52]	; (8002c00 <prvCheckForValidListAndQueue+0x5c>)
 8002bca:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002bcc:	2200      	movs	r2, #0
 8002bce:	210c      	movs	r1, #12
 8002bd0:	2005      	movs	r0, #5
 8002bd2:	f7fe f813 	bl	8000bfc <xQueueGenericCreate>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b07      	ldr	r3, [pc, #28]	; (8002bf8 <prvCheckForValidListAndQueue+0x54>)
 8002bda:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002bdc:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <prvCheckForValidListAndQueue+0x54>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d005      	beq.n	8002bf0 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <prvCheckForValidListAndQueue+0x54>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4908      	ldr	r1, [pc, #32]	; (8002c0c <prvCheckForValidListAndQueue+0x68>)
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe fc0e 	bl	800140c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002bf0:	f7fd fcd4 	bl	800059c <vPortExitCritical>
}
 8002bf4:	bf00      	nop
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20001dec 	.word	0x20001dec
 8002bfc:	20001dbc 	.word	0x20001dbc
 8002c00:	20001dd0 	.word	0x20001dd0
 8002c04:	20001de4 	.word	0x20001de4
 8002c08:	20001de8 	.word	0x20001de8
 8002c0c:	08004868 	.word	0x08004868

08002c10 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <DAC_SetChannel1Data+0x34>)
 8002c22:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4413      	add	r3, r2
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	461a      	mov	r2, r3
 8002c32:	887b      	ldrh	r3, [r7, #2]
 8002c34:	6013      	str	r3, [r2, #0]
}
 8002c36:	bf00      	nop
 8002c38:	3714      	adds	r7, #20
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	40007400 	.word	0x40007400

08002c48 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <DMA_Init+0xac>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002c72:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002c7e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002c8a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c90:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002c96:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f023 0307 	bic.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	60da      	str	r2, [r3, #12]
}
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	f01c803f 	.word	0xf01c803f

08002cf8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d006      	beq.n	8002d18 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f043 0201 	orr.w	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002d16:	e005      	b.n	8002d24 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 0201 	bic.w	r2, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	601a      	str	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
 8002d4c:	e001      	b.n	8002d52 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <DMA_GetFlagStatus+0x6c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d802      	bhi.n	8002d80 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002d7a:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <DMA_GetFlagStatus+0x70>)
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	e001      	b.n	8002d84 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002d80:	4b14      	ldr	r3, [pc, #80]	; (8002dd4 <DMA_GetFlagStatus+0x74>)
 8002d82:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	e002      	b.n	8002d9c <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002da2:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8002db2:	2301      	movs	r3, #1
 8002db4:	75fb      	strb	r3, [r7, #23]
 8002db6:	e001      	b.n	8002dbc <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8002db8:	2300      	movs	r3, #0
 8002dba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	371c      	adds	r7, #28
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	4002640f 	.word	0x4002640f
 8002dd0:	40026000 	.word	0x40026000
 8002dd4:	40026400 	.word	0x40026400

08002dd8 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <DMA_ClearFlag+0x50>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d802      	bhi.n	8002df0 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002dea:	4b10      	ldr	r3, [pc, #64]	; (8002e2c <DMA_ClearFlag+0x54>)
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	e001      	b.n	8002df4 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002df0:	4b0f      	ldr	r3, [pc, #60]	; (8002e30 <DMA_ClearFlag+0x58>)
 8002df2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002e04:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8002e0c:	e006      	b.n	8002e1c <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002e14:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	6093      	str	r3, [r2, #8]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	4002640f 	.word	0x4002640f
 8002e2c:	40026000 	.word	0x40026000
 8002e30:	40026400 	.word	0x40026400

08002e34 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	819a      	strh	r2, [r3, #12]
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b085      	sub	sp, #20
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	891b      	ldrh	r3, [r3, #8]
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	e001      	b.n	8002e7c <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8002e90:	4b38      	ldr	r3, [pc, #224]	; (8002f74 <Audio_MAL_IRQHandler+0xe8>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	4b38      	ldr	r3, [pc, #224]	; (8002f78 <Audio_MAL_IRQHandler+0xec>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	f7ff ff60 	bl	8002d60 <DMA_GetFlagStatus>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d064      	beq.n	8002f70 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8002ea6:	4b35      	ldr	r3, [pc, #212]	; (8002f7c <Audio_MAL_IRQHandler+0xf0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d04c      	beq.n	8002f48 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8002eae:	bf00      	nop
 8002eb0:	4b30      	ldr	r3, [pc, #192]	; (8002f74 <Audio_MAL_IRQHandler+0xe8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff3b 	bl	8002d30 <DMA_GetCmdStatus>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f7      	bne.n	8002eb0 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8002ec0:	4b2c      	ldr	r3, [pc, #176]	; (8002f74 <Audio_MAL_IRQHandler+0xe8>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <Audio_MAL_IRQHandler+0xec>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7ff ff84 	bl	8002dd8 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8002ed0:	4b2b      	ldr	r3, [pc, #172]	; (8002f80 <Audio_MAL_IRQHandler+0xf4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <Audio_MAL_IRQHandler+0xf8>)
 8002ed8:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8002eda:	4b28      	ldr	r3, [pc, #160]	; (8002f7c <Audio_MAL_IRQHandler+0xf0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	bf28      	it	cs
 8002ee6:	4613      	movcs	r3, r2
 8002ee8:	4a26      	ldr	r2, [pc, #152]	; (8002f84 <Audio_MAL_IRQHandler+0xf8>)
 8002eea:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8002eec:	4b21      	ldr	r3, [pc, #132]	; (8002f74 <Audio_MAL_IRQHandler+0xe8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4924      	ldr	r1, [pc, #144]	; (8002f84 <Audio_MAL_IRQHandler+0xf8>)
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fea8 	bl	8002c48 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8002ef8:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <Audio_MAL_IRQHandler+0xe8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2101      	movs	r1, #1
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fefa 	bl	8002cf8 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8002f04:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <Audio_MAL_IRQHandler+0xf4>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b1c      	ldr	r3, [pc, #112]	; (8002f7c <Audio_MAL_IRQHandler+0xf0>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f10:	d203      	bcs.n	8002f1a <Audio_MAL_IRQHandler+0x8e>
 8002f12:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <Audio_MAL_IRQHandler+0xf0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	e000      	b.n	8002f1c <Audio_MAL_IRQHandler+0x90>
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <Audio_MAL_IRQHandler+0xfc>)
 8002f1c:	4413      	add	r3, r2
 8002f1e:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <Audio_MAL_IRQHandler+0xf4>)
 8002f20:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8002f22:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <Audio_MAL_IRQHandler+0xf0>)
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	4b15      	ldr	r3, [pc, #84]	; (8002f7c <Audio_MAL_IRQHandler+0xf0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f2e:	428b      	cmp	r3, r1
 8002f30:	bf28      	it	cs
 8002f32:	460b      	movcs	r3, r1
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	4a11      	ldr	r2, [pc, #68]	; (8002f7c <Audio_MAL_IRQHandler+0xf0>)
 8002f38:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	; (8002f74 <Audio_MAL_IRQHandler+0xe8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff fed9 	bl	8002cf8 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8002f46:	e013      	b.n	8002f70 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <Audio_MAL_IRQHandler+0xe8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff fed2 	bl	8002cf8 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <Audio_MAL_IRQHandler+0xe8>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <Audio_MAL_IRQHandler+0xec>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4610      	mov	r0, r2
 8002f60:	f7ff ff3a 	bl	8002dd8 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <Audio_MAL_IRQHandler+0xf4>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2100      	movs	r1, #0
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f83c 	bl	8002fe8 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	2000000c 	.word	0x2000000c
 8002f78:	20000010 	.word	0x20000010
 8002f7c:	20000004 	.word	0x20000004
 8002f80:	20001e54 	.word	0x20001e54
 8002f84:	20001e94 	.word	0x20001e94
 8002f88:	0001fffe 	.word	0x0001fffe

08002f8c <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002f90:	f7ff ff7c 	bl	8002e8c <Audio_MAL_IRQHandler>
}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8002f9c:	f7ff ff76 	bl	8002e8c <Audio_MAL_IRQHandler>
}
 8002fa0:	bf00      	nop
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8002fa8:	2102      	movs	r1, #2
 8002faa:	480d      	ldr	r0, [pc, #52]	; (8002fe0 <SPI3_IRQHandler+0x3c>)
 8002fac:	f7ff ff51 	bl	8002e52 <SPI_I2S_GetFlagStatus>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d011      	beq.n	8002fda <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <SPI3_IRQHandler+0x40>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d106      	bne.n	8002fcc <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8002fbe:	f000 f81e 	bl	8002ffe <EVAL_AUDIO_GetSampleCallBack>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	2004      	movs	r0, #4
 8002fc8:	f7ff fe22 	bl	8002c10 <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8002fcc:	f000 f817 	bl	8002ffe <EVAL_AUDIO_GetSampleCallBack>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	4802      	ldr	r0, [pc, #8]	; (8002fe0 <SPI3_IRQHandler+0x3c>)
 8002fd6:	f7ff ff2d 	bl	8002e34 <SPI_I2S_SendData>
  }
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	40003c00 	.word	0x40003c00
 8002fe4:	20000008 	.word	0x20000008

08002fe8 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8002ff2:	bf00      	nop
}
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8002ffe:	b480      	push	{r7}
 8003000:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <Gen1_Task>:
#include "../inc/main.h"

extern xQueueHandle Generator_Queue;


void Gen1_Task (void *taskParamters){
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af02      	add	r7, sp, #8
 8003016:	6078      	str	r0, [r7, #4]
	TaskHandle_t task1;
	xTaskCreate(User_Defined_Task, "User_Defined_Task1", configMINIMAL_STACK_SIZE, NULL, 1, &task1); // Create task with placeholder priority
 8003018:	f107 030c 	add.w	r3, r7, #12
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	2301      	movs	r3, #1
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2300      	movs	r3, #0
 8003024:	2264      	movs	r2, #100	; 0x64
 8003026:	4909      	ldr	r1, [pc, #36]	; (800304c <Gen1_Task+0x3c>)
 8003028:	4809      	ldr	r0, [pc, #36]	; (8003050 <Gen1_Task+0x40>)
 800302a:	f7fe fa4b 	bl	80014c4 <xTaskCreate>
	vTaskSuspend(task1);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fe fc27 	bl	8001884 <vTaskSuspend>
	while (1){
		createDDTask(task1, 1, TASK_1_EXEC, TASK_1_PERIOD);
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	23fa      	movs	r3, #250	; 0xfa
 800303a:	225f      	movs	r2, #95	; 0x5f
 800303c:	2101      	movs	r1, #1
 800303e:	f000 f851 	bl	80030e4 <createDDTask>
		vTaskDelay(pdMS_TO_TICKS(TASK_1_PERIOD));
 8003042:	20fa      	movs	r0, #250	; 0xfa
 8003044:	f7fe fbea 	bl	800181c <vTaskDelay>
		createDDTask(task1, 1, TASK_1_EXEC, TASK_1_PERIOD);
 8003048:	e7f5      	b.n	8003036 <Gen1_Task+0x26>
 800304a:	bf00      	nop
 800304c:	08004870 	.word	0x08004870
 8003050:	08003e45 	.word	0x08003e45

08003054 <Gen2_Task>:
	}
}

void Gen2_Task (void *taskParamters){
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af02      	add	r7, sp, #8
 800305a:	6078      	str	r0, [r7, #4]
	TaskHandle_t task2;
	xTaskCreate(User_Defined_Task, "User_Defined_Task2", configMINIMAL_STACK_SIZE, NULL, 1, &task2); // Create task with placeholder priority
 800305c:	f107 030c 	add.w	r3, r7, #12
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	2301      	movs	r3, #1
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	2300      	movs	r3, #0
 8003068:	2264      	movs	r2, #100	; 0x64
 800306a:	490a      	ldr	r1, [pc, #40]	; (8003094 <Gen2_Task+0x40>)
 800306c:	480a      	ldr	r0, [pc, #40]	; (8003098 <Gen2_Task+0x44>)
 800306e:	f7fe fa29 	bl	80014c4 <xTaskCreate>
	vTaskSuspend(task2);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fc05 	bl	8001884 <vTaskSuspend>
	while (1){
		createDDTask(task2, 2, TASK_2_EXEC, TASK_2_PERIOD);
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003080:	2296      	movs	r2, #150	; 0x96
 8003082:	2102      	movs	r1, #2
 8003084:	f000 f82e 	bl	80030e4 <createDDTask>
		vTaskDelay(pdMS_TO_TICKS(TASK_2_PERIOD));
 8003088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800308c:	f7fe fbc6 	bl	800181c <vTaskDelay>
		createDDTask(task2, 2, TASK_2_EXEC, TASK_2_PERIOD);
 8003090:	e7f3      	b.n	800307a <Gen2_Task+0x26>
 8003092:	bf00      	nop
 8003094:	08004884 	.word	0x08004884
 8003098:	08003e45 	.word	0x08003e45

0800309c <Gen3_Task>:
	}
}

void Gen3_Task (void *taskParamters){
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	6078      	str	r0, [r7, #4]
	TaskHandle_t task3;
	xTaskCreate(User_Defined_Task, "User_Defined_Task3", configMINIMAL_STACK_SIZE, NULL, 1, &task3); // Create task with placeholder priority
 80030a4:	f107 030c 	add.w	r3, r7, #12
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2301      	movs	r3, #1
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2300      	movs	r3, #0
 80030b0:	2264      	movs	r2, #100	; 0x64
 80030b2:	490a      	ldr	r1, [pc, #40]	; (80030dc <Gen3_Task+0x40>)
 80030b4:	480a      	ldr	r0, [pc, #40]	; (80030e0 <Gen3_Task+0x44>)
 80030b6:	f7fe fa05 	bl	80014c4 <xTaskCreate>
	vTaskSuspend(task3);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fbe1 	bl	8001884 <vTaskSuspend>
	while (1){
		createDDTask(task3, 3, TASK_3_EXEC, TASK_3_PERIOD);
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f240 23ee 	movw	r3, #750	; 0x2ee
 80030c8:	22fa      	movs	r2, #250	; 0xfa
 80030ca:	2103      	movs	r1, #3
 80030cc:	f000 f80a 	bl	80030e4 <createDDTask>
		vTaskDelay(pdMS_TO_TICKS(TASK_3_PERIOD));
 80030d0:	f240 20ee 	movw	r0, #750	; 0x2ee
 80030d4:	f7fe fba2 	bl	800181c <vTaskDelay>
		createDDTask(task3, 3, TASK_3_EXEC, TASK_3_PERIOD);
 80030d8:	e7f3      	b.n	80030c2 <Gen3_Task+0x26>
 80030da:	bf00      	nop
 80030dc:	08004898 	.word	0x08004898
 80030e0:	08003e45 	.word	0x08003e45

080030e4 <createDDTask>:
	}
}

void createDDTask (TaskHandle_t task, int id, int executionTime, int period){
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]

	struct taskListNode* newTask = createNode(task, executionTime, period, id);
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 f827 	bl	800314c <createNode>
 80030fe:	4603      	mov	r3, r0
 8003100:	617b      	str	r3, [r7, #20]

	if (newTask == NULL){
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d103      	bne.n	8003110 <createDDTask+0x2c>
		printf("createDDTask: Unable to create task: %d\n", id);
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	480d      	ldr	r0, [pc, #52]	; (8003140 <createDDTask+0x5c>)
 800310c:	f000 fe50 	bl	8003db0 <printf>
	}

	// Send the task to the user-defined task queue
	if (!xQueueSend(Generator_Queue, &newTask, 1000)) {
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <createDDTask+0x60>)
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	f107 0114 	add.w	r1, r7, #20
 8003118:	2300      	movs	r3, #0
 800311a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800311e:	f7fd fdc5 	bl	8000cac <xQueueGenericSend>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d107      	bne.n	8003138 <createDDTask+0x54>
		printf("createDDTask: Failed to send task %d to User_Defined_Queue\n", id);
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	4807      	ldr	r0, [pc, #28]	; (8003148 <createDDTask+0x64>)
 800312c:	f000 fe40 	bl	8003db0 <printf>
		free(newTask);  // Only free if it never made it to the user-defined task
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 ff06 	bl	8003f44 <free>
	}
}
 8003138:	bf00      	nop
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	080048ac 	.word	0x080048ac
 8003144:	20001df8 	.word	0x20001df8
 8003148:	080048d8 	.word	0x080048d8

0800314c <createNode>:
#include <stdlib.h>
#include "FreeRTOS.h"
#include "task.h"

// Function to create a new node
struct taskListNode* createNode(TaskHandle_t task, int execution_time, int period, int id) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
 8003158:	603b      	str	r3, [r7, #0]
    struct taskListNode* newNode = (struct taskListNode*)malloc(sizeof(struct taskListNode));
 800315a:	2020      	movs	r0, #32
 800315c:	f000 feea 	bl	8003f34 <malloc>
 8003160:	4603      	mov	r3, r0
 8003162:	617b      	str	r3, [r7, #20]
    newNode->execution_time = execution_time;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	601a      	str	r2, [r3, #0]
    newNode->period = period;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	605a      	str	r2, [r3, #4]
    newNode->next = NULL;
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
    newNode->release_time = 0;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2200      	movs	r2, #0
 800317a:	60da      	str	r2, [r3, #12]
    newNode->task_id = id;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	611a      	str	r2, [r3, #16]
    newNode->task = task;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	619a      	str	r2, [r3, #24]
    return newNode;
 8003188:	697b      	ldr	r3, [r7, #20]
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <insertAtFirst>:

// Function to insert a new element at the beginning of the singly linked list
void insertAtFirst(struct taskListNode** head, struct taskListNode* node) {
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
    node->next = *head;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	61da      	str	r2, [r3, #28]
    *head = node;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	601a      	str	r2, [r3, #0]
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <insertAtEnd>:

// Function to insert a new element at the end of the singly linked list
void insertAtEnd(struct taskListNode** head, struct taskListNode* node) {
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b084      	sub	sp, #16
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
	node->next = NULL;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	61da      	str	r2, [r3, #28]
    if (*head == NULL) {
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <insertAtEnd+0x22>
        insertAtFirst(head, node);
 80031ce:	6839      	ldr	r1, [r7, #0]
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f7ff ffde 	bl	8003192 <insertAtFirst>
        return;
 80031d6:	e00d      	b.n	80031f4 <insertAtEnd+0x3e>
    }
    struct taskListNode* temp = *head;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]
    while (temp->next != NULL) {
 80031de:	e002      	b.n	80031e6 <insertAtEnd+0x30>
        temp = temp->next;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	60fb      	str	r3, [r7, #12]
    while (temp->next != NULL) {
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f8      	bne.n	80031e0 <insertAtEnd+0x2a>
    }
    temp->next = node;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	61da      	str	r2, [r3, #28]
}
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <deleteFromFirst>:
    node->next = temp->next;
    temp->next = node;
}

// Function to delete the first node of the singly linked list
void deleteFromFirst(struct taskListNode** head) {
 80031fa:	b480      	push	{r7}
 80031fc:	b085      	sub	sp, #20
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
    if (*head == NULL) {
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d007      	beq.n	800321a <deleteFromFirst+0x20>
        return;
    }
    struct taskListNode* temp = *head;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	60fb      	str	r3, [r7, #12]
    *head = temp->next;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e000      	b.n	800321c <deleteFromFirst+0x22>
        return;
 800321a:	bf00      	nop
    //free(temp);
}
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <count>:
    struct taskListNode* next = temp->next->next;
    free(temp->next);
    temp->next = next;
}

int count(struct taskListNode* head){
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
	int count = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	60fb      	str	r3, [r7, #12]
    struct taskListNode* temp = head;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60bb      	str	r3, [r7, #8]
    while (temp != NULL) {
 8003236:	e005      	b.n	8003244 <count+0x1e>
        count++;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3301      	adds	r3, #1
 800323c:	60fb      	str	r3, [r7, #12]
        temp = temp->next;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	60bb      	str	r3, [r7, #8]
    while (temp != NULL) {
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f6      	bne.n	8003238 <count+0x12>
    }
	return count;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <NVIC_SetPriorityGrouping+0x44>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003274:	4013      	ands	r3, r2
 8003276:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8003280:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328a:	4a04      	ldr	r2, [pc, #16]	; (800329c <NVIC_SetPriorityGrouping+0x44>)
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	60d3      	str	r3, [r2, #12]
}
 8003290:	bf00      	nop
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <main>:


/*-----------------------------------------------------------*/

int main(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af02      	add	r7, sp, #8

	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 80032a6:	f000 f9d4 	bl	8003652 <prvSetupHardware>


	// Create the queue used by the queue send and queue receive tasks.

	// size of each item needs to be adjusted
	Generator_Queue = xQueueCreate(	mainQUEUE_LENGTH, sizeof( struct taskListNode* ) );
 80032aa:	2200      	movs	r2, #0
 80032ac:	2104      	movs	r1, #4
 80032ae:	2002      	movs	r0, #2
 80032b0:	f7fd fca4 	bl	8000bfc <xQueueGenericCreate>
 80032b4:	4602      	mov	r2, r0
 80032b6:	4b35      	ldr	r3, [pc, #212]	; (800338c <main+0xec>)
 80032b8:	601a      	str	r2, [r3, #0]

	User_Defined_Queue = xQueueCreate(2, sizeof( struct taskListNode* ) );
 80032ba:	2200      	movs	r2, #0
 80032bc:	2104      	movs	r1, #4
 80032be:	2002      	movs	r0, #2
 80032c0:	f7fd fc9c 	bl	8000bfc <xQueueGenericCreate>
 80032c4:	4602      	mov	r2, r0
 80032c6:	4b32      	ldr	r3, [pc, #200]	; (8003390 <main+0xf0>)
 80032c8:	601a      	str	r2, [r3, #0]

	Monitor_Queue = xQueueCreate(2, sizeof( struct ListGroup ) );
 80032ca:	2200      	movs	r2, #0
 80032cc:	210c      	movs	r1, #12
 80032ce:	2002      	movs	r0, #2
 80032d0:	f7fd fc94 	bl	8000bfc <xQueueGenericCreate>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b2f      	ldr	r3, [pc, #188]	; (8003394 <main+0xf4>)
 80032d8:	601a      	str	r2, [r3, #0]

	Result_Queue = xQueueCreate(2, sizeof(int) );
 80032da:	2200      	movs	r2, #0
 80032dc:	2104      	movs	r1, #4
 80032de:	2002      	movs	r0, #2
 80032e0:	f7fd fc8c 	bl	8000bfc <xQueueGenericCreate>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b2c      	ldr	r3, [pc, #176]	; (8003398 <main+0xf8>)
 80032e8:	601a      	str	r2, [r3, #0]

	/* Add to the registry, for the benefit of kernel aware debugging. */

	vQueueAddToRegistry( Generator_Queue, "Generator_Queue" );
 80032ea:	4b28      	ldr	r3, [pc, #160]	; (800338c <main+0xec>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	492b      	ldr	r1, [pc, #172]	; (800339c <main+0xfc>)
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fe f88b 	bl	800140c <vQueueAddToRegistry>
	vQueueAddToRegistry( User_Defined_Queue, "User_Defined_Queue" );
 80032f6:	4b26      	ldr	r3, [pc, #152]	; (8003390 <main+0xf0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4929      	ldr	r1, [pc, #164]	; (80033a0 <main+0x100>)
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fe f885 	bl	800140c <vQueueAddToRegistry>
	vQueueAddToRegistry( Monitor_Queue, "Monitor_Queue" );
 8003302:	4b24      	ldr	r3, [pc, #144]	; (8003394 <main+0xf4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4927      	ldr	r1, [pc, #156]	; (80033a4 <main+0x104>)
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe f87f 	bl	800140c <vQueueAddToRegistry>
	vQueueAddToRegistry( Result_Queue, "Result_Queue" );
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <main+0xf8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4925      	ldr	r1, [pc, #148]	; (80033a8 <main+0x108>)
 8003314:	4618      	mov	r0, r3
 8003316:	f7fe f879 	bl	800140c <vQueueAddToRegistry>

	xTaskCreate( DDS_Task, "DDS", configMINIMAL_STACK_SIZE, NULL, 2, &DDS);
 800331a:	4b24      	ldr	r3, [pc, #144]	; (80033ac <main+0x10c>)
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	2302      	movs	r3, #2
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	2300      	movs	r3, #0
 8003324:	2264      	movs	r2, #100	; 0x64
 8003326:	4922      	ldr	r1, [pc, #136]	; (80033b0 <main+0x110>)
 8003328:	4822      	ldr	r0, [pc, #136]	; (80033b4 <main+0x114>)
 800332a:	f7fe f8cb 	bl	80014c4 <xTaskCreate>
	xTaskCreate( Gen1_Task, "Gen1", configMINIMAL_STACK_SIZE, NULL, 2, &Gen1);
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <main+0x118>)
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	2302      	movs	r3, #2
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	2300      	movs	r3, #0
 8003338:	2264      	movs	r2, #100	; 0x64
 800333a:	4920      	ldr	r1, [pc, #128]	; (80033bc <main+0x11c>)
 800333c:	4820      	ldr	r0, [pc, #128]	; (80033c0 <main+0x120>)
 800333e:	f7fe f8c1 	bl	80014c4 <xTaskCreate>
	xTaskCreate( Gen2_Task, "Gen2", configMINIMAL_STACK_SIZE, NULL, 2, &Gen2);
 8003342:	4b20      	ldr	r3, [pc, #128]	; (80033c4 <main+0x124>)
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	2302      	movs	r3, #2
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2300      	movs	r3, #0
 800334c:	2264      	movs	r2, #100	; 0x64
 800334e:	491e      	ldr	r1, [pc, #120]	; (80033c8 <main+0x128>)
 8003350:	481e      	ldr	r0, [pc, #120]	; (80033cc <main+0x12c>)
 8003352:	f7fe f8b7 	bl	80014c4 <xTaskCreate>
	xTaskCreate( Gen3_Task, "Gen3", configMINIMAL_STACK_SIZE, NULL, 2, &Gen3);
 8003356:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <main+0x130>)
 8003358:	9301      	str	r3, [sp, #4]
 800335a:	2302      	movs	r3, #2
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	2300      	movs	r3, #0
 8003360:	2264      	movs	r2, #100	; 0x64
 8003362:	491c      	ldr	r1, [pc, #112]	; (80033d4 <main+0x134>)
 8003364:	481c      	ldr	r0, [pc, #112]	; (80033d8 <main+0x138>)
 8003366:	f7fe f8ad 	bl	80014c4 <xTaskCreate>
	xTaskCreate( Monitor_Task, "Monitor", configMINIMAL_STACK_SIZE, NULL, 2, &Monitor);
 800336a:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <main+0x13c>)
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	2302      	movs	r3, #2
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	2300      	movs	r3, #0
 8003374:	2264      	movs	r2, #100	; 0x64
 8003376:	491a      	ldr	r1, [pc, #104]	; (80033e0 <main+0x140>)
 8003378:	481a      	ldr	r0, [pc, #104]	; (80033e4 <main+0x144>)
 800337a:	f7fe f8a3 	bl	80014c4 <xTaskCreate>

	/* Start the tasks and timer running. */
	vTaskStartScheduler();
 800337e:	f7fe fb9f 	bl	8001ac0 <vTaskStartScheduler>

	return 0;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	20001df8 	.word	0x20001df8
 8003390:	20001dfc 	.word	0x20001dfc
 8003394:	20001e00 	.word	0x20001e00
 8003398:	20001e04 	.word	0x20001e04
 800339c:	08004914 	.word	0x08004914
 80033a0:	08004924 	.word	0x08004924
 80033a4:	08004938 	.word	0x08004938
 80033a8:	08004948 	.word	0x08004948
 80033ac:	20001ed0 	.word	0x20001ed0
 80033b0:	08004958 	.word	0x08004958
 80033b4:	080033e9 	.word	0x080033e9
 80033b8:	20001ee0 	.word	0x20001ee0
 80033bc:	0800495c 	.word	0x0800495c
 80033c0:	08003011 	.word	0x08003011
 80033c4:	20001ed8 	.word	0x20001ed8
 80033c8:	08004964 	.word	0x08004964
 80033cc:	08003055 	.word	0x08003055
 80033d0:	20001ed4 	.word	0x20001ed4
 80033d4:	0800496c 	.word	0x0800496c
 80033d8:	0800309d 	.word	0x0800309d
 80033dc:	20001edc 	.word	0x20001edc
 80033e0:	08004974 	.word	0x08004974
 80033e4:	080035a5 	.word	0x080035a5

080033e8 <DDS_Task>:

/*-----------------------------------------------------------*/

static void DDS_Task( void *pvParameters )
{
 80033e8:	b590      	push	{r4, r7, lr}
 80033ea:	b08f      	sub	sp, #60	; 0x3c
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	int start_time = xTaskGetTickCount();
 80033f0:	f7fe fc5c 	bl	8001cac <xTaskGetTickCount>
 80033f4:	4603      	mov	r3, r0
 80033f6:	637b      	str	r3, [r7, #52]	; 0x34
	struct taskListNode* activeHead = NULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28
	struct taskListNode* completedHead = NULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
	struct taskListNode* overdueHead = NULL;
 8003400:	2300      	movs	r3, #0
 8003402:	623b      	str	r3, [r7, #32]
	monitorSemaphore = xSemaphoreCreateBinary();
 8003404:	2203      	movs	r2, #3
 8003406:	2100      	movs	r1, #0
 8003408:	2001      	movs	r0, #1
 800340a:	f7fd fbf7 	bl	8000bfc <xQueueGenericCreate>
 800340e:	4602      	mov	r2, r0
 8003410:	4b5c      	ldr	r3, [pc, #368]	; (8003584 <DDS_Task+0x19c>)
 8003412:	601a      	str	r2, [r3, #0]
	// task, exec_time, period, id

	while(1)
	{
		struct taskListNode* temp_node;
		int elapsed_time = xTaskGetTickCount() - start_time;
 8003414:	f7fe fc4a 	bl	8001cac <xTaskGetTickCount>
 8003418:	4602      	mov	r2, r0
 800341a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	633b      	str	r3, [r7, #48]	; 0x30
		if(elapsed_time >= pdMS_TO_TICKS(1500)){
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	f240 52db 	movw	r2, #1499	; 0x5db
 8003426:	4293      	cmp	r3, r2
 8003428:	d91c      	bls.n	8003464 <DDS_Task+0x7c>
			start_time = xTaskGetTickCount();
 800342a:	f7fe fc3f 	bl	8001cac <xTaskGetTickCount>
 800342e:	4603      	mov	r3, r0
 8003430:	637b      	str	r3, [r7, #52]	; 0x34
			struct ListGroup lists;
			lists.activeHead = activeHead;
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	60fb      	str	r3, [r7, #12]
			lists.completedHead = completedHead;
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	613b      	str	r3, [r7, #16]
			lists.overdueHead = overdueHead;
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	617b      	str	r3, [r7, #20]
			if(xQueueSend(Monitor_Queue, &lists, 1000))
 800343e:	4b52      	ldr	r3, [pc, #328]	; (8003588 <DDS_Task+0x1a0>)
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	f107 010c 	add.w	r1, r7, #12
 8003446:	2300      	movs	r3, #0
 8003448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800344c:	f7fd fc2e 	bl	8000cac <xQueueGenericSend>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d006      	beq.n	8003464 <DDS_Task+0x7c>
				xSemaphoreGive(monitorSemaphore);
 8003456:	4b4b      	ldr	r3, [pc, #300]	; (8003584 <DDS_Task+0x19c>)
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	2300      	movs	r3, #0
 800345c:	2200      	movs	r2, #0
 800345e:	2100      	movs	r1, #0
 8003460:	f7fd fc24 	bl	8000cac <xQueueGenericSend>
		}
		if( xQueueReceive(Generator_Queue,&temp_node,1000))
 8003464:	4b49      	ldr	r3, [pc, #292]	; (800358c <DDS_Task+0x1a4>)
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	f107 0118 	add.w	r1, r7, #24
 800346c:	2300      	movs	r3, #0
 800346e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003472:	f7fd fda9 	bl	8000fc8 <xQueueGenericReceive>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d027      	beq.n	80034cc <DDS_Task+0xe4>
		{
			temp_node = createNode(temp_node->task, temp_node->execution_time, temp_node->period, temp_node->task_id);
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	6998      	ldr	r0, [r3, #24]
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6819      	ldr	r1, [r3, #0]
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	f7ff fe5e 	bl	800314c <createNode>
 8003490:	4603      	mov	r3, r0
 8003492:	61bb      	str	r3, [r7, #24]
			temp_node->release_time = pdTICKS_TO_MS(xTaskGetTickCount());
 8003494:	69bc      	ldr	r4, [r7, #24]
 8003496:	f7fe fc09 	bl	8001cac <xTaskGetTickCount>
 800349a:	4602      	mov	r2, r0
 800349c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034a0:	fb03 f302 	mul.w	r3, r3, r2
 80034a4:	4a3a      	ldr	r2, [pc, #232]	; (8003590 <DDS_Task+0x1a8>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	099b      	lsrs	r3, r3, #6
 80034ac:	60e3      	str	r3, [r4, #12]
			temp_node->deadline = temp_node->release_time + temp_node->period;
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	68d1      	ldr	r1, [r2, #12]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	6852      	ldr	r2, [r2, #4]
 80034b8:	440a      	add	r2, r1
 80034ba:	609a      	str	r2, [r3, #8]
			insertAtEnd(&activeHead, temp_node);
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034c2:	4611      	mov	r1, r2
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fe76 	bl	80031b6 <insertAtEnd>
 80034ca:	e002      	b.n	80034d2 <DDS_Task+0xea>
		}
		else
		{
			printf("Manager Failed!\n");
 80034cc:	4831      	ldr	r0, [pc, #196]	; (8003594 <DDS_Task+0x1ac>)
 80034ce:	f000 fe5d 	bl	800418c <puts>
		}
		if(activeHead != NULL && activeHead->next != NULL){
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00a      	beq.n	80034ee <DDS_Task+0x106>
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d006      	beq.n	80034ee <DDS_Task+0x106>
			activeHead = MergeSort(activeHead);
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 f911 	bl	800370a <MergeSort>
 80034e8:	4603      	mov	r3, r0
 80034ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ec:	e002      	b.n	80034f4 <DDS_Task+0x10c>
		} else if(activeHead == NULL) {
 80034ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d044      	beq.n	800357e <DDS_Task+0x196>
			continue;
		}
		//checkOverdue(&activeHead, &overdueHead);
		if(activeHead != NULL){
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d03e      	beq.n	8003578 <DDS_Task+0x190>
			if(xQueueSend(User_Defined_Queue, &activeHead, 1000)){
 80034fa:	4b27      	ldr	r3, [pc, #156]	; (8003598 <DDS_Task+0x1b0>)
 80034fc:	6818      	ldr	r0, [r3, #0]
 80034fe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003502:	2300      	movs	r3, #0
 8003504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003508:	f7fd fbd0 	bl	8000cac <xQueueGenericSend>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d009      	beq.n	8003526 <DDS_Task+0x13e>
				vTaskResume(activeHead->task);
 8003512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe fa76 	bl	8001a08 <vTaskResume>
				vTaskSuspend(DDS);
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <DDS_Task+0x1b4>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fe f9af 	bl	8001884 <vTaskSuspend>
			}
			if(xQueueReceive(Result_Queue, &result, 1000)){
 8003526:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <DDS_Task+0x1b8>)
 8003528:	6818      	ldr	r0, [r3, #0]
 800352a:	f107 011c 	add.w	r1, r7, #28
 800352e:	2300      	movs	r3, #0
 8003530:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003534:	f7fd fd48 	bl	8000fc8 <xQueueGenericReceive>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d01c      	beq.n	8003578 <DDS_Task+0x190>
				struct taskListNode* temp = activeHead;
 800353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
				temp->next = NULL;
 8003542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003544:	2200      	movs	r2, #0
 8003546:	61da      	str	r2, [r3, #28]
				deleteFromFirst(&activeHead);
 8003548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff fe54 	bl	80031fa <deleteFromFirst>
				if(temp->completion_time <= temp->deadline){
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	429a      	cmp	r2, r3
 800355c:	dc06      	bgt.n	800356c <DDS_Task+0x184>
					insertAtFirst(&completedHead, temp);
 800355e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff fe14 	bl	8003192 <insertAtFirst>
 800356a:	e005      	b.n	8003578 <DDS_Task+0x190>
				}else{
					insertAtFirst(&overdueHead, temp);
 800356c:	f107 0320 	add.w	r3, r7, #32
 8003570:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fe0d 	bl	8003192 <insertAtFirst>
				}
			}
		}
		result = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	e74a      	b.n	8003414 <DDS_Task+0x2c>
			continue;
 800357e:	bf00      	nop
	{
 8003580:	e748      	b.n	8003414 <DDS_Task+0x2c>
 8003582:	bf00      	nop
 8003584:	20001ee4 	.word	0x20001ee4
 8003588:	20001e00 	.word	0x20001e00
 800358c:	20001df8 	.word	0x20001df8
 8003590:	10624dd3 	.word	0x10624dd3
 8003594:	0800497c 	.word	0x0800497c
 8003598:	20001dfc 	.word	0x20001dfc
 800359c:	20001ed0 	.word	0x20001ed0
 80035a0:	20001e04 	.word	0x20001e04

080035a4 <Monitor_Task>:
	}
}


static void Monitor_Task( void *pvParameters )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	struct ListGroup lists;
	while(1){
		if(xSemaphoreTake(monitorSemaphore, portMAX_DELAY) == pdTRUE){
 80035ac:	4b19      	ldr	r3, [pc, #100]	; (8003614 <Monitor_Task+0x70>)
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	2300      	movs	r3, #0
 80035b2:	f04f 32ff 	mov.w	r2, #4294967295
 80035b6:	2100      	movs	r1, #0
 80035b8:	f7fd fd06 	bl	8000fc8 <xQueueGenericReceive>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d1f4      	bne.n	80035ac <Monitor_Task+0x8>
			if(xQueueReceive(Monitor_Queue, &lists, 1000)){
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <Monitor_Task+0x74>)
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	f107 010c 	add.w	r1, r7, #12
 80035ca:	2300      	movs	r3, #0
 80035cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035d0:	f7fd fcfa 	bl	8000fc8 <xQueueGenericReceive>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0e8      	beq.n	80035ac <Monitor_Task+0x8>
				printf("Active Tasks: %d\n", count(lists.activeHead));
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff fe22 	bl	8003226 <count>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4619      	mov	r1, r3
 80035e6:	480d      	ldr	r0, [pc, #52]	; (800361c <Monitor_Task+0x78>)
 80035e8:	f000 fbe2 	bl	8003db0 <printf>
				printf("Completed Tasks: %d\n", count(lists.completedHead));
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fe19 	bl	8003226 <count>
 80035f4:	4603      	mov	r3, r0
 80035f6:	4619      	mov	r1, r3
 80035f8:	4809      	ldr	r0, [pc, #36]	; (8003620 <Monitor_Task+0x7c>)
 80035fa:	f000 fbd9 	bl	8003db0 <printf>
				printf("Overdue Tasks: %d\n", count(lists.overdueHead));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fe10 	bl	8003226 <count>
 8003606:	4603      	mov	r3, r0
 8003608:	4619      	mov	r1, r3
 800360a:	4806      	ldr	r0, [pc, #24]	; (8003624 <Monitor_Task+0x80>)
 800360c:	f000 fbd0 	bl	8003db0 <printf>
		if(xSemaphoreTake(monitorSemaphore, portMAX_DELAY) == pdTRUE){
 8003610:	e7cc      	b.n	80035ac <Monitor_Task+0x8>
 8003612:	bf00      	nop
 8003614:	20001ee4 	.word	0x20001ee4
 8003618:	20001e00 	.word	0x20001e00
 800361c:	0800498c 	.word	0x0800498c
 8003620:	080049a0 	.word	0x080049a0
 8003624:	080049b8 	.word	0x080049b8

08003628 <vApplicationMallocFailedHook>:


/*-----------------------------------------------------------*/

void vApplicationMallocFailedHook( void )
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
	Called if a call to pvPortMalloc() fails because there is insufficient
	free memory available in the FreeRTOS heap.  pvPortMalloc() is called
	internally by FreeRTOS API functions that create tasks, queues, software 
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */
	for( ;; );
 800362c:	e7fe      	b.n	800362c <vApplicationMallocFailedHook+0x4>

0800362e <vApplicationStackOverflowHook>:
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
 8003636:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8003638:	e7fe      	b.n	8003638 <vApplicationStackOverflowHook+0xa>

0800363a <vApplicationIdleHook>:
}
/*-----------------------------------------------------------*/

void vApplicationIdleHook( void )
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
	FreeRTOSConfig.h.

	This function is called on each cycle of the idle task.  In this case it
	does nothing useful, other than report the amount of FreeRTOS heap that
	remains unallocated. */
	xFreeStackSpace = xPortGetFreeHeapSize();
 8003640:	f7fd f9ac 	bl	800099c <xPortGetFreeHeapSize>
 8003644:	4603      	mov	r3, r0
 8003646:	607b      	str	r3, [r7, #4]

	if( xFreeStackSpace > 100 )
 8003648:	687b      	ldr	r3, [r7, #4]
		/* By now, the kernel has allocated everything it is going to, so
		if there is a lot of heap remaining unallocated then
		the value of configTOTAL_HEAP_SIZE in FreeRTOSConfig.h can be
		reduced accordingly. */
	}
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <prvSetupHardware>:
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8003652:	b580      	push	{r7, lr}
 8003654:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8003656:	2000      	movs	r0, #0
 8003658:	f7ff fdfe 	bl	8003258 <NVIC_SetPriorityGrouping>

	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */
}
 800365c:	bf00      	nop
 800365e:	bd80      	pop	{r7, pc}

08003660 <split>:
 */

#include "../inc/mergeSort.h"

// Function to split the singly linked list into two halves
struct taskListNode* split(struct taskListNode* head) {
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
    struct taskListNode* fast = head;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	617b      	str	r3, [r7, #20]
    struct taskListNode* slow = head;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	613b      	str	r3, [r7, #16]

    // Move fast pointer two steps and slow pointer
    // one step until fast reaches the end
    while (fast != NULL && fast->next != NULL) {
 8003670:	e009      	b.n	8003686 <split+0x26>
        fast = fast->next->next;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	617b      	str	r3, [r7, #20]
        if (fast != NULL) {
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <split+0x26>
            slow = slow->next;
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	613b      	str	r3, [r7, #16]
    while (fast != NULL && fast->next != NULL) {
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <split+0x34>
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1ee      	bne.n	8003672 <split+0x12>
        }
    }

    // Split the list into two halves
    struct taskListNode* temp = slow->next;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	60fb      	str	r3, [r7, #12]
    slow->next = NULL;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2200      	movs	r2, #0
 800369e:	61da      	str	r2, [r3, #28]
    return temp;
 80036a0:	68fb      	ldr	r3, [r7, #12]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <merge>:

// Function to merge two sorted singly linked lists
struct taskListNode* merge(struct taskListNode* first, struct taskListNode* second) {
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]

    // If either list is empty, return the other list
    if (first == NULL) return second;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <merge+0x14>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	e01f      	b.n	8003702 <merge+0x54>
    if (second == NULL) return first;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <merge+0x1e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	e01a      	b.n	8003702 <merge+0x54>

    // Pick the smaller value between first and second nodes
    if (first->deadline < second->deadline) {
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	da0a      	bge.n	80036ee <merge+0x40>
        // Recursively merge the rest of the lists and
        // link the result to the current node
        first->next = merge(first->next, second);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff ffe5 	bl	80036ae <merge>
 80036e4:	4602      	mov	r2, r0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	61da      	str	r2, [r3, #28]
        return first;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	e009      	b.n	8003702 <merge+0x54>
    }
    else {
        // Recursively merge the rest of the lists
        // and link the result to the current node
        second->next = merge(first, second->next);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff ffda 	bl	80036ae <merge>
 80036fa:	4602      	mov	r2, r0
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	61da      	str	r2, [r3, #28]
        return second;
 8003700:	683b      	ldr	r3, [r7, #0]
    }
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <MergeSort>:

// Function to perform merge sort on a singly linked list
struct taskListNode* MergeSort(struct taskListNode* head) {
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]

    // Base case: if the list is empty or has only one node,
    // it's already sorted
    if (head == NULL || head->next == NULL) {
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <MergeSort+0x16>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <MergeSort+0x1a>
        return head;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	e010      	b.n	8003746 <MergeSort+0x3c>
    }

    // Split the list into two halves
    struct taskListNode* second = split(head);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f7ff ff9b 	bl	8003660 <split>
 800372a:	60f8      	str	r0, [r7, #12]

    // Recursively sort each half
    head = MergeSort(head);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ffec 	bl	800370a <MergeSort>
 8003732:	6078      	str	r0, [r7, #4]
    second = MergeSort(second);
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f7ff ffe8 	bl	800370a <MergeSort>
 800373a:	60f8      	str	r0, [r7, #12]

    // Merge the two sorted halves
    return merge(head, second);
 800373c:	68f9      	ldr	r1, [r7, #12]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff ffb5 	bl	80036ae <merge>
 8003744:	4603      	mov	r3, r0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3710      	adds	r7, #16
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
	...

08003750 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003750:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003752:	e003      	b.n	800375c <LoopCopyDataInit>

08003754 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8003756:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003758:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800375a:	3104      	adds	r1, #4

0800375c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800375c:	480a      	ldr	r0, [pc, #40]	; (8003788 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800375e:	4b0b      	ldr	r3, [pc, #44]	; (800378c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8003760:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003762:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003764:	d3f6      	bcc.n	8003754 <CopyDataInit>
  ldr  r2, =_sbss
 8003766:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8003768:	e002      	b.n	8003770 <LoopFillZerobss>

0800376a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800376a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800376c:	f842 3b04 	str.w	r3, [r2], #4

08003770 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003770:	4b08      	ldr	r3, [pc, #32]	; (8003794 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8003772:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003774:	d3f9      	bcc.n	800376a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003776:	f000 f8f3 	bl	8003960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800377a:	f000 fbb7 	bl	8003eec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800377e:	f7ff fd8f 	bl	80032a0 <main>
  bx  lr    
 8003782:	4770      	bx	lr
  ldr  r3, =_sidata
 8003784:	08004a50 	.word	0x08004a50
  ldr  r0, =_sdata
 8003788:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800378c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8003790:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8003794:	20001eec 	.word	0x20001eec

08003798 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003798:	e7fe      	b.n	8003798 <ADC_IRQHandler>

0800379a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800379a:	b480      	push	{r7}
 800379c:	af00      	add	r7, sp, #0
}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80037ac:	e7fe      	b.n	80037ac <HardFault_Handler+0x4>

080037ae <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80037b2:	e7fe      	b.n	80037b2 <MemManage_Handler+0x4>

080037b4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80037b8:	e7fe      	b.n	80037b8 <BusFault_Handler+0x4>

080037ba <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80037ba:	b480      	push	{r7}
 80037bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80037be:	e7fe      	b.n	80037be <UsageFault_Handler+0x4>

080037c0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
	...

080037d0 <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 80037d8:	4b13      	ldr	r3, [pc, #76]	; (8003828 <ITM_SendChar+0x58>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01a      	beq.n	800381a <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80037e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80037e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80037ec:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d012      	beq.n	800381a <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 80037f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80037f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80037fc:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 8003804:	bf00      	nop
 8003806:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0fa      	beq.n	8003806 <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 8003810:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800381a:	687b      	ldr	r3, [r7, #4]
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	e000edf0 	.word	0xe000edf0

0800382c <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e009      	b.n	8003856 <_write+0x2a>
	 ITM_SendChar((*ptr++));
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	60ba      	str	r2, [r7, #8]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff ffc0 	bl	80037d0 <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	3301      	adds	r3, #1
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	429a      	cmp	r2, r3
 800385c:	dbf1      	blt.n	8003842 <_write+0x16>
 return len;
 800385e:	687b      	ldr	r3, [r7, #4]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <_sbrk>:


void * _sbrk(int32_t incr)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
	extern char   end; /* Set by linker.  */
	static char * heap_end;
	char *        prev_heap_end;

	if (heap_end == 0) {
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <_sbrk+0x38>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <_sbrk+0x16>
		heap_end = & end;
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <_sbrk+0x38>)
 800387a:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <_sbrk+0x3c>)
 800387c:	601a      	str	r2, [r3, #0]
	}

	prev_heap_end = heap_end;
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <_sbrk+0x38>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]
	heap_end += incr;
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <_sbrk+0x38>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4413      	add	r3, r2
 800388c:	4a04      	ldr	r2, [pc, #16]	; (80038a0 <_sbrk+0x38>)
 800388e:	6013      	str	r3, [r2, #0]

	return (void *) prev_heap_end;
 8003890:	68fb      	ldr	r3, [r7, #12]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20001e08 	.word	0x20001e08
 80038a4:	20001eec 	.word	0x20001eec

080038a8 <_close>:

int _close(int32_t file)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <_close+0x20>)
 80038b2:	2258      	movs	r2, #88	; 0x58
 80038b4:	601a      	str	r2, [r3, #0]
	return -1;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20001ee8 	.word	0x20001ee8

080038cc <_fstat>:


int _fstat(int32_t file, struct stat *st)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
	errno = ENOSYS;
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <_fstat+0x20>)
 80038d8:	2258      	movs	r2, #88	; 0x58
 80038da:	601a      	str	r2, [r3, #0]
	return -1;
 80038dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	20001ee8 	.word	0x20001ee8

080038f0 <_isatty>:

int _isatty(int32_t file)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
	errno = ENOSYS;
 80038f8:	4b04      	ldr	r3, [pc, #16]	; (800390c <_isatty+0x1c>)
 80038fa:	2258      	movs	r2, #88	; 0x58
 80038fc:	601a      	str	r2, [r3, #0]
	return 0;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	20001ee8 	.word	0x20001ee8

08003910 <_lseek>:

int _lseek(int32_t file, int32_t ptr, int32_t dir)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <_lseek+0x24>)
 800391e:	2258      	movs	r2, #88	; 0x58
 8003920:	601a      	str	r2, [r3, #0]
	return -1;
 8003922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20001ee8 	.word	0x20001ee8

08003938 <_read>:

int _read(int32_t file, uint8_t *ptr, int32_t len)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	607a      	str	r2, [r7, #4]
	errno = ENOSYS;
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <_read+0x24>)
 8003946:	2258      	movs	r2, #88	; 0x58
 8003948:	601a      	str	r2, [r3, #0]
	return -1;
 800394a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20001ee8 	.word	0x20001ee8

08003960 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003964:	4a16      	ldr	r2, [pc, #88]	; (80039c0 <SystemInit+0x60>)
 8003966:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <SystemInit+0x60>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003974:	4a13      	ldr	r2, [pc, #76]	; (80039c4 <SystemInit+0x64>)
 8003976:	4b13      	ldr	r3, [pc, #76]	; (80039c4 <SystemInit+0x64>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003980:	4b10      	ldr	r3, [pc, #64]	; (80039c4 <SystemInit+0x64>)
 8003982:	2200      	movs	r2, #0
 8003984:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003986:	4a0f      	ldr	r2, [pc, #60]	; (80039c4 <SystemInit+0x64>)
 8003988:	4b0e      	ldr	r3, [pc, #56]	; (80039c4 <SystemInit+0x64>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003994:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003996:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <SystemInit+0x64>)
 8003998:	4a0b      	ldr	r2, [pc, #44]	; (80039c8 <SystemInit+0x68>)
 800399a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800399c:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <SystemInit+0x64>)
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <SystemInit+0x64>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80039a8:	4b06      	ldr	r3, [pc, #24]	; (80039c4 <SystemInit+0x64>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80039ae:	f000 f80d 	bl	80039cc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039b2:	4b03      	ldr	r3, [pc, #12]	; (80039c0 <SystemInit+0x60>)
 80039b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039b8:	609a      	str	r2, [r3, #8]
#endif
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	e000ed00 	.word	0xe000ed00
 80039c4:	40023800 	.word	0x40023800
 80039c8:	24003010 	.word	0x24003010

080039cc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	2300      	movs	r3, #0
 80039d8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80039da:	4a36      	ldr	r2, [pc, #216]	; (8003ab4 <SetSysClock+0xe8>)
 80039dc:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <SetSysClock+0xe8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80039e6:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <SetSysClock+0xe8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3301      	adds	r3, #1
 80039f4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d103      	bne.n	8003a04 <SetSysClock+0x38>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003a02:	d1f0      	bne.n	80039e6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003a04:	4b2b      	ldr	r3, [pc, #172]	; (8003ab4 <SetSysClock+0xe8>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003a10:	2301      	movs	r3, #1
 8003a12:	603b      	str	r3, [r7, #0]
 8003a14:	e001      	b.n	8003a1a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003a16:	2300      	movs	r3, #0
 8003a18:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d142      	bne.n	8003aa6 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003a20:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <SetSysClock+0xe8>)
 8003a22:	4b24      	ldr	r3, [pc, #144]	; (8003ab4 <SetSysClock+0xe8>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8003a2c:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <SetSysClock+0xec>)
 8003a2e:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <SetSysClock+0xec>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a36:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003a38:	4a1e      	ldr	r2, [pc, #120]	; (8003ab4 <SetSysClock+0xe8>)
 8003a3a:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <SetSysClock+0xe8>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003a40:	4a1c      	ldr	r2, [pc, #112]	; (8003ab4 <SetSysClock+0xe8>)
 8003a42:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <SetSysClock+0xe8>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a4a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8003a4c:	4a19      	ldr	r2, [pc, #100]	; (8003ab4 <SetSysClock+0xe8>)
 8003a4e:	4b19      	ldr	r3, [pc, #100]	; (8003ab4 <SetSysClock+0xe8>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003a56:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003a58:	4b16      	ldr	r3, [pc, #88]	; (8003ab4 <SetSysClock+0xe8>)
 8003a5a:	4a18      	ldr	r2, [pc, #96]	; (8003abc <SetSysClock+0xf0>)
 8003a5c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003a5e:	4a15      	ldr	r2, [pc, #84]	; (8003ab4 <SetSysClock+0xe8>)
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <SetSysClock+0xe8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a68:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003a6a:	bf00      	nop
 8003a6c:	4b11      	ldr	r3, [pc, #68]	; (8003ab4 <SetSysClock+0xe8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0f9      	beq.n	8003a6c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003a78:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <SetSysClock+0xf4>)
 8003a7a:	f240 6205 	movw	r2, #1541	; 0x605
 8003a7e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003a80:	4a0c      	ldr	r2, [pc, #48]	; (8003ab4 <SetSysClock+0xe8>)
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <SetSysClock+0xe8>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 0303 	bic.w	r3, r3, #3
 8003a8a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003a8c:	4a09      	ldr	r2, [pc, #36]	; (8003ab4 <SetSysClock+0xe8>)
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <SetSysClock+0xe8>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f043 0302 	orr.w	r3, r3, #2
 8003a96:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8003a98:	bf00      	nop
 8003a9a:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <SetSysClock+0xe8>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d1f9      	bne.n	8003a9a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	07405408 	.word	0x07405408
 8003ac0:	40023c00 	.word	0x40023c00

08003ac4 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003ad4:	e004      	b.n	8003ae0 <ts_itoa+0x1c>
		div *= base;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	fb02 f303 	mul.w	r3, r2, r3
 8003ade:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d2f3      	bcs.n	8003ad6 <ts_itoa+0x12>

	while (div != 0)
 8003aee:	e029      	b.n	8003b44 <ts_itoa+0x80>
	{
		int num = d/div;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af8:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	fbb3 f1f2 	udiv	r1, r3, r2
 8003b02:	fb02 f201 	mul.w	r2, r2, r1
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b12:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	2b09      	cmp	r3, #9
 8003b18:	dd0a      	ble.n	8003b30 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	1c59      	adds	r1, r3, #1
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	6011      	str	r1, [r2, #0]
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	3237      	adds	r2, #55	; 0x37
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	e009      	b.n	8003b44 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	1c59      	adds	r1, r3, #1
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	6011      	str	r1, [r2, #0]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	3230      	adds	r2, #48	; 0x30
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1d2      	bne.n	8003af0 <ts_itoa+0x2c>
	}
}
 8003b4a:	bf00      	nop
 8003b4c:	371c      	adds	r7, #28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr

08003b56 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003b56:	b580      	push	{r7, lr}
 8003b58:	b088      	sub	sp, #32
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	60f8      	str	r0, [r7, #12]
 8003b5e:	60b9      	str	r1, [r7, #8]
 8003b60:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003b66:	e07d      	b.n	8003c64 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b25      	cmp	r3, #37	; 0x25
 8003b6e:	d171      	bne.n	8003c54 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	3301      	adds	r3, #1
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d01e      	beq.n	8003bbc <ts_formatstring+0x66>
 8003b7e:	2b64      	cmp	r3, #100	; 0x64
 8003b80:	dc06      	bgt.n	8003b90 <ts_formatstring+0x3a>
 8003b82:	2b58      	cmp	r3, #88	; 0x58
 8003b84:	d050      	beq.n	8003c28 <ts_formatstring+0xd2>
 8003b86:	2b63      	cmp	r3, #99	; 0x63
 8003b88:	d00e      	beq.n	8003ba8 <ts_formatstring+0x52>
 8003b8a:	2b25      	cmp	r3, #37	; 0x25
 8003b8c:	d058      	beq.n	8003c40 <ts_formatstring+0xea>
 8003b8e:	e05d      	b.n	8003c4c <ts_formatstring+0xf6>
 8003b90:	2b73      	cmp	r3, #115	; 0x73
 8003b92:	d02b      	beq.n	8003bec <ts_formatstring+0x96>
 8003b94:	2b73      	cmp	r3, #115	; 0x73
 8003b96:	dc02      	bgt.n	8003b9e <ts_formatstring+0x48>
 8003b98:	2b69      	cmp	r3, #105	; 0x69
 8003b9a:	d00f      	beq.n	8003bbc <ts_formatstring+0x66>
 8003b9c:	e056      	b.n	8003c4c <ts_formatstring+0xf6>
 8003b9e:	2b75      	cmp	r3, #117	; 0x75
 8003ba0:	d037      	beq.n	8003c12 <ts_formatstring+0xbc>
 8003ba2:	2b78      	cmp	r3, #120	; 0x78
 8003ba4:	d040      	beq.n	8003c28 <ts_formatstring+0xd2>
 8003ba6:	e051      	b.n	8003c4c <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	60fa      	str	r2, [r7, #12]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	1d11      	adds	r1, r2, #4
 8003bb2:	6079      	str	r1, [r7, #4]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	701a      	strb	r2, [r3, #0]
				break;
 8003bba:	e047      	b.n	8003c4c <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	1d1a      	adds	r2, r3, #4
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	da07      	bge.n	8003bdc <ts_formatstring+0x86>
					{
						val *= -1;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	425b      	negs	r3, r3
 8003bd0:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	60fa      	str	r2, [r7, #12]
 8003bd8:	222d      	movs	r2, #45	; 0x2d
 8003bda:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003bdc:	69f9      	ldr	r1, [r7, #28]
 8003bde:	f107 030c 	add.w	r3, r7, #12
 8003be2:	220a      	movs	r2, #10
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff6d 	bl	8003ac4 <ts_itoa>
				}
				break;
 8003bea:	e02f      	b.n	8003c4c <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	1d1a      	adds	r2, r3, #4
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8003bf6:	e007      	b.n	8003c08 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	60fa      	str	r2, [r7, #12]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	1c51      	adds	r1, r2, #1
 8003c02:	61b9      	str	r1, [r7, #24]
 8003c04:	7812      	ldrb	r2, [r2, #0]
 8003c06:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1f3      	bne.n	8003bf8 <ts_formatstring+0xa2>
					}
				}
				break;
 8003c10:	e01c      	b.n	8003c4c <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	1d1a      	adds	r2, r3, #4
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	6819      	ldr	r1, [r3, #0]
 8003c1a:	f107 030c 	add.w	r3, r7, #12
 8003c1e:	220a      	movs	r2, #10
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ff4f 	bl	8003ac4 <ts_itoa>
				break;
 8003c26:	e011      	b.n	8003c4c <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	1d1a      	adds	r2, r3, #4
 8003c2c:	607a      	str	r2, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4619      	mov	r1, r3
 8003c32:	f107 030c 	add.w	r3, r7, #12
 8003c36:	2210      	movs	r2, #16
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff ff43 	bl	8003ac4 <ts_itoa>
				break;
 8003c3e:	e005      	b.n	8003c4c <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1c5a      	adds	r2, r3, #1
 8003c44:	60fa      	str	r2, [r7, #12]
 8003c46:	2225      	movs	r2, #37	; 0x25
 8003c48:	701a      	strb	r2, [r3, #0]
				  break;
 8003c4a:	bf00      	nop
			}
			fmt++;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60bb      	str	r3, [r7, #8]
 8003c52:	e007      	b.n	8003c64 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	60fa      	str	r2, [r7, #12]
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	1c51      	adds	r1, r2, #1
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	7812      	ldrb	r2, [r2, #0]
 8003c62:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f47f af7d 	bne.w	8003b68 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	461a      	mov	r2, r3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	1ad3      	subs	r3, r2, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3720      	adds	r7, #32
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
	int length = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 8003c92:	e081      	b.n	8003d98 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b25      	cmp	r3, #37	; 0x25
 8003c9a:	d177      	bne.n	8003d8c <ts_formatlength+0x108>
		{
			++fmt;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	3b58      	subs	r3, #88	; 0x58
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d86a      	bhi.n	8003d82 <ts_formatlength+0xfe>
 8003cac:	a201      	add	r2, pc, #4	; (adr r2, 8003cb4 <ts_formatlength+0x30>)
 8003cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb2:	bf00      	nop
 8003cb4:	08003d75 	.word	0x08003d75
 8003cb8:	08003d83 	.word	0x08003d83
 8003cbc:	08003d83 	.word	0x08003d83
 8003cc0:	08003d83 	.word	0x08003d83
 8003cc4:	08003d83 	.word	0x08003d83
 8003cc8:	08003d83 	.word	0x08003d83
 8003ccc:	08003d83 	.word	0x08003d83
 8003cd0:	08003d83 	.word	0x08003d83
 8003cd4:	08003d83 	.word	0x08003d83
 8003cd8:	08003d83 	.word	0x08003d83
 8003cdc:	08003d83 	.word	0x08003d83
 8003ce0:	08003d39 	.word	0x08003d39
 8003ce4:	08003d47 	.word	0x08003d47
 8003ce8:	08003d83 	.word	0x08003d83
 8003cec:	08003d83 	.word	0x08003d83
 8003cf0:	08003d83 	.word	0x08003d83
 8003cf4:	08003d83 	.word	0x08003d83
 8003cf8:	08003d47 	.word	0x08003d47
 8003cfc:	08003d83 	.word	0x08003d83
 8003d00:	08003d83 	.word	0x08003d83
 8003d04:	08003d83 	.word	0x08003d83
 8003d08:	08003d83 	.word	0x08003d83
 8003d0c:	08003d83 	.word	0x08003d83
 8003d10:	08003d83 	.word	0x08003d83
 8003d14:	08003d83 	.word	0x08003d83
 8003d18:	08003d83 	.word	0x08003d83
 8003d1c:	08003d83 	.word	0x08003d83
 8003d20:	08003d55 	.word	0x08003d55
 8003d24:	08003d83 	.word	0x08003d83
 8003d28:	08003d47 	.word	0x08003d47
 8003d2c:	08003d83 	.word	0x08003d83
 8003d30:	08003d83 	.word	0x08003d83
 8003d34:	08003d75 	.word	0x08003d75
			{
			  case 'c':
		  		  va_arg(va, int);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	603b      	str	r3, [r7, #0]
				  ++length;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3301      	adds	r3, #1
 8003d42:	60fb      	str	r3, [r7, #12]
				  break;
 8003d44:	e025      	b.n	8003d92 <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	330b      	adds	r3, #11
 8003d4a:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	603b      	str	r3, [r7, #0]
				  break;
 8003d52:	e01e      	b.n	8003d92 <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	1d1a      	adds	r2, r3, #4
 8003d58:	603a      	str	r2, [r7, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8003d5e:	e002      	b.n	8003d66 <ts_formatlength+0xe2>
			  			  ++length;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3301      	adds	r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	60ba      	str	r2, [r7, #8]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f6      	bne.n	8003d60 <ts_formatlength+0xdc>
			  	  }
				  break;
 8003d72:	e00e      	b.n	8003d92 <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3308      	adds	r3, #8
 8003d78:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	603b      	str	r3, [r7, #0]
				  break;
 8003d80:	e007      	b.n	8003d92 <ts_formatlength+0x10e>
			  default:
				  ++length;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3301      	adds	r3, #1
 8003d86:	60fb      	str	r3, [r7, #12]
				  break;
 8003d88:	bf00      	nop
 8003d8a:	e002      	b.n	8003d92 <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3301      	adds	r3, #1
 8003d96:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	f47f af79 	bne.w	8003c94 <ts_formatlength+0x10>
	}
	return length;
 8003da2:	68fb      	ldr	r3, [r7, #12]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 8003db0:	b40f      	push	{r0, r1, r2, r3}
 8003db2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
	int length = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8003dbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003dc2:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 8003dc4:	6839      	ldr	r1, [r7, #0]
 8003dc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dc8:	f7ff ff5c 	bl	8003c84 <ts_formatlength>
 8003dcc:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8003dce:	466b      	mov	r3, sp
 8003dd0:	461e      	mov	r6, r3
		char buf[length];
 8003dd2:	68f9      	ldr	r1, [r7, #12]
 8003dd4:	1e4b      	subs	r3, r1, #1
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 8003de4:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 8003de8:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 8003dec:	460b      	mov	r3, r1
 8003dee:	461a      	mov	r2, r3
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	00dd      	lsls	r5, r3, #3
 8003df6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003dfa:	00d4      	lsls	r4, r2, #3
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	3307      	adds	r3, #7
 8003e00:	08db      	lsrs	r3, r3, #3
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	ebad 0d03 	sub.w	sp, sp, r3
 8003e08:	466b      	mov	r3, sp
 8003e0a:	3300      	adds	r3, #0
 8003e0c:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 8003e0e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003e12:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fe9b 	bl	8003b56 <ts_formatstring>
 8003e20:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4619      	mov	r1, r3
 8003e28:	2001      	movs	r0, #1
 8003e2a:	f7ff fcff 	bl	800382c <_write>
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 8003e32:	68fb      	ldr	r3, [r7, #12]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003e3e:	b004      	add	sp, #16
 8003e40:	4770      	bx	lr
	...

08003e44 <User_Defined_Task>:

extern xQueueHandle User_Defined_Queue;
extern xQueueHandle Result_Queue;
extern TaskHandle_t DDS;

void User_Defined_Task(void *pvParameters) {
 8003e44:	b590      	push	{r4, r7, lr}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
    struct taskListNode* currentTask;
    int result;

    while (1) {
        // Wait for task pointer from DDS
    	result = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
        if ( xQueueReceive(User_Defined_Queue,&currentTask,1000)) {
 8003e50:	4b22      	ldr	r3, [pc, #136]	; (8003edc <User_Defined_Task+0x98>)
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	f107 0110 	add.w	r1, r7, #16
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e5e:	f7fd f8b3 	bl	8000fc8 <xQueueGenericReceive>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0f1      	beq.n	8003e4c <User_Defined_Task+0x8>

            TickType_t start = xTaskGetTickCount();
 8003e68:	f7fd ff20 	bl	8001cac <xTaskGetTickCount>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	60bb      	str	r3, [r7, #8]
            TickType_t duration = pdMS_TO_TICKS(currentTask->execution_time);
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	461a      	mov	r2, r3
 8003e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e7a:	fb03 f302 	mul.w	r3, r3, r2
 8003e7e:	4a18      	ldr	r2, [pc, #96]	; (8003ee0 <User_Defined_Task+0x9c>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	099b      	lsrs	r3, r3, #6
 8003e86:	617b      	str	r3, [r7, #20]

            vTaskDelayUntil(&start, duration);
 8003e88:	f107 0308 	add.w	r3, r7, #8
 8003e8c:	6979      	ldr	r1, [r7, #20]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fd fc4a 	bl	8001728 <vTaskDelayUntil>

            result = 1; // 1 for success
 8003e94:	2301      	movs	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
            xQueueSend(Result_Queue, &result, portMAX_DELAY);
 8003e98:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <User_Defined_Task+0xa0>)
 8003e9a:	6818      	ldr	r0, [r3, #0]
 8003e9c:	f107 010c 	add.w	r1, r7, #12
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea6:	f7fc ff01 	bl	8000cac <xQueueGenericSend>
            currentTask->completion_time = pdMS_TO_TICKS(xTaskGetTickCount());
 8003eaa:	693c      	ldr	r4, [r7, #16]
 8003eac:	f7fd fefe 	bl	8001cac <xTaskGetTickCount>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eb6:	fb03 f302 	mul.w	r3, r3, r2
 8003eba:	4a09      	ldr	r2, [pc, #36]	; (8003ee0 <User_Defined_Task+0x9c>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	099b      	lsrs	r3, r3, #6
 8003ec2:	6163      	str	r3, [r4, #20]
            vTaskResume(DDS);
 8003ec4:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <User_Defined_Task+0xa4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fd fd9d 	bl	8001a08 <vTaskResume>
            vTaskSuspend(currentTask->task);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fd fcd6 	bl	8001884 <vTaskSuspend>
    	result = 0;
 8003ed8:	e7b8      	b.n	8003e4c <User_Defined_Task+0x8>
 8003eda:	bf00      	nop
 8003edc:	20001dfc 	.word	0x20001dfc
 8003ee0:	10624dd3 	.word	0x10624dd3
 8003ee4:	20001e04 	.word	0x20001e04
 8003ee8:	20001ed0 	.word	0x20001ed0

08003eec <__libc_init_array>:
 8003eec:	b570      	push	{r4, r5, r6, lr}
 8003eee:	4e0d      	ldr	r6, [pc, #52]	; (8003f24 <__libc_init_array+0x38>)
 8003ef0:	4c0d      	ldr	r4, [pc, #52]	; (8003f28 <__libc_init_array+0x3c>)
 8003ef2:	1ba4      	subs	r4, r4, r6
 8003ef4:	10a4      	asrs	r4, r4, #2
 8003ef6:	2500      	movs	r5, #0
 8003ef8:	42a5      	cmp	r5, r4
 8003efa:	d109      	bne.n	8003f10 <__libc_init_array+0x24>
 8003efc:	4e0b      	ldr	r6, [pc, #44]	; (8003f2c <__libc_init_array+0x40>)
 8003efe:	4c0c      	ldr	r4, [pc, #48]	; (8003f30 <__libc_init_array+0x44>)
 8003f00:	f000 fd96 	bl	8004a30 <_init>
 8003f04:	1ba4      	subs	r4, r4, r6
 8003f06:	10a4      	asrs	r4, r4, #2
 8003f08:	2500      	movs	r5, #0
 8003f0a:	42a5      	cmp	r5, r4
 8003f0c:	d105      	bne.n	8003f1a <__libc_init_array+0x2e>
 8003f0e:	bd70      	pop	{r4, r5, r6, pc}
 8003f10:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f14:	4798      	blx	r3
 8003f16:	3501      	adds	r5, #1
 8003f18:	e7ee      	b.n	8003ef8 <__libc_init_array+0xc>
 8003f1a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f1e:	4798      	blx	r3
 8003f20:	3501      	adds	r5, #1
 8003f22:	e7f2      	b.n	8003f0a <__libc_init_array+0x1e>
 8003f24:	08004a48 	.word	0x08004a48
 8003f28:	08004a48 	.word	0x08004a48
 8003f2c:	08004a48 	.word	0x08004a48
 8003f30:	08004a4c 	.word	0x08004a4c

08003f34 <malloc>:
 8003f34:	4b02      	ldr	r3, [pc, #8]	; (8003f40 <malloc+0xc>)
 8003f36:	4601      	mov	r1, r0
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	f000 b86d 	b.w	8004018 <_malloc_r>
 8003f3e:	bf00      	nop
 8003f40:	20000018 	.word	0x20000018

08003f44 <free>:
 8003f44:	4b02      	ldr	r3, [pc, #8]	; (8003f50 <free+0xc>)
 8003f46:	4601      	mov	r1, r0
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	f000 b817 	b.w	8003f7c <_free_r>
 8003f4e:	bf00      	nop
 8003f50:	20000018 	.word	0x20000018

08003f54 <memcpy>:
 8003f54:	b510      	push	{r4, lr}
 8003f56:	1e43      	subs	r3, r0, #1
 8003f58:	440a      	add	r2, r1
 8003f5a:	4291      	cmp	r1, r2
 8003f5c:	d100      	bne.n	8003f60 <memcpy+0xc>
 8003f5e:	bd10      	pop	{r4, pc}
 8003f60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f68:	e7f7      	b.n	8003f5a <memcpy+0x6>

08003f6a <memset>:
 8003f6a:	4402      	add	r2, r0
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d100      	bne.n	8003f74 <memset+0xa>
 8003f72:	4770      	bx	lr
 8003f74:	f803 1b01 	strb.w	r1, [r3], #1
 8003f78:	e7f9      	b.n	8003f6e <memset+0x4>
	...

08003f7c <_free_r>:
 8003f7c:	b538      	push	{r3, r4, r5, lr}
 8003f7e:	4605      	mov	r5, r0
 8003f80:	2900      	cmp	r1, #0
 8003f82:	d045      	beq.n	8004010 <_free_r+0x94>
 8003f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f88:	1f0c      	subs	r4, r1, #4
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bfb8      	it	lt
 8003f8e:	18e4      	addlt	r4, r4, r3
 8003f90:	f000 fbb4 	bl	80046fc <__malloc_lock>
 8003f94:	4a1f      	ldr	r2, [pc, #124]	; (8004014 <_free_r+0x98>)
 8003f96:	6813      	ldr	r3, [r2, #0]
 8003f98:	4610      	mov	r0, r2
 8003f9a:	b933      	cbnz	r3, 8003faa <_free_r+0x2e>
 8003f9c:	6063      	str	r3, [r4, #4]
 8003f9e:	6014      	str	r4, [r2, #0]
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fa6:	f000 bbaa 	b.w	80046fe <__malloc_unlock>
 8003faa:	42a3      	cmp	r3, r4
 8003fac:	d90c      	bls.n	8003fc8 <_free_r+0x4c>
 8003fae:	6821      	ldr	r1, [r4, #0]
 8003fb0:	1862      	adds	r2, r4, r1
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	bf04      	itt	eq
 8003fb6:	681a      	ldreq	r2, [r3, #0]
 8003fb8:	685b      	ldreq	r3, [r3, #4]
 8003fba:	6063      	str	r3, [r4, #4]
 8003fbc:	bf04      	itt	eq
 8003fbe:	1852      	addeq	r2, r2, r1
 8003fc0:	6022      	streq	r2, [r4, #0]
 8003fc2:	6004      	str	r4, [r0, #0]
 8003fc4:	e7ec      	b.n	8003fa0 <_free_r+0x24>
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	b10a      	cbz	r2, 8003fd0 <_free_r+0x54>
 8003fcc:	42a2      	cmp	r2, r4
 8003fce:	d9fa      	bls.n	8003fc6 <_free_r+0x4a>
 8003fd0:	6819      	ldr	r1, [r3, #0]
 8003fd2:	1858      	adds	r0, r3, r1
 8003fd4:	42a0      	cmp	r0, r4
 8003fd6:	d10b      	bne.n	8003ff0 <_free_r+0x74>
 8003fd8:	6820      	ldr	r0, [r4, #0]
 8003fda:	4401      	add	r1, r0
 8003fdc:	1858      	adds	r0, r3, r1
 8003fde:	4282      	cmp	r2, r0
 8003fe0:	6019      	str	r1, [r3, #0]
 8003fe2:	d1dd      	bne.n	8003fa0 <_free_r+0x24>
 8003fe4:	6810      	ldr	r0, [r2, #0]
 8003fe6:	6852      	ldr	r2, [r2, #4]
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	4401      	add	r1, r0
 8003fec:	6019      	str	r1, [r3, #0]
 8003fee:	e7d7      	b.n	8003fa0 <_free_r+0x24>
 8003ff0:	d902      	bls.n	8003ff8 <_free_r+0x7c>
 8003ff2:	230c      	movs	r3, #12
 8003ff4:	602b      	str	r3, [r5, #0]
 8003ff6:	e7d3      	b.n	8003fa0 <_free_r+0x24>
 8003ff8:	6820      	ldr	r0, [r4, #0]
 8003ffa:	1821      	adds	r1, r4, r0
 8003ffc:	428a      	cmp	r2, r1
 8003ffe:	bf04      	itt	eq
 8004000:	6811      	ldreq	r1, [r2, #0]
 8004002:	6852      	ldreq	r2, [r2, #4]
 8004004:	6062      	str	r2, [r4, #4]
 8004006:	bf04      	itt	eq
 8004008:	1809      	addeq	r1, r1, r0
 800400a:	6021      	streq	r1, [r4, #0]
 800400c:	605c      	str	r4, [r3, #4]
 800400e:	e7c7      	b.n	8003fa0 <_free_r+0x24>
 8004010:	bd38      	pop	{r3, r4, r5, pc}
 8004012:	bf00      	nop
 8004014:	20001e0c 	.word	0x20001e0c

08004018 <_malloc_r>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	1ccd      	adds	r5, r1, #3
 800401c:	f025 0503 	bic.w	r5, r5, #3
 8004020:	3508      	adds	r5, #8
 8004022:	2d0c      	cmp	r5, #12
 8004024:	bf38      	it	cc
 8004026:	250c      	movcc	r5, #12
 8004028:	2d00      	cmp	r5, #0
 800402a:	4606      	mov	r6, r0
 800402c:	db01      	blt.n	8004032 <_malloc_r+0x1a>
 800402e:	42a9      	cmp	r1, r5
 8004030:	d903      	bls.n	800403a <_malloc_r+0x22>
 8004032:	230c      	movs	r3, #12
 8004034:	6033      	str	r3, [r6, #0]
 8004036:	2000      	movs	r0, #0
 8004038:	bd70      	pop	{r4, r5, r6, pc}
 800403a:	f000 fb5f 	bl	80046fc <__malloc_lock>
 800403e:	4a23      	ldr	r2, [pc, #140]	; (80040cc <_malloc_r+0xb4>)
 8004040:	6814      	ldr	r4, [r2, #0]
 8004042:	4621      	mov	r1, r4
 8004044:	b991      	cbnz	r1, 800406c <_malloc_r+0x54>
 8004046:	4c22      	ldr	r4, [pc, #136]	; (80040d0 <_malloc_r+0xb8>)
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	b91b      	cbnz	r3, 8004054 <_malloc_r+0x3c>
 800404c:	4630      	mov	r0, r6
 800404e:	f000 f8a5 	bl	800419c <_sbrk_r>
 8004052:	6020      	str	r0, [r4, #0]
 8004054:	4629      	mov	r1, r5
 8004056:	4630      	mov	r0, r6
 8004058:	f000 f8a0 	bl	800419c <_sbrk_r>
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	d126      	bne.n	80040ae <_malloc_r+0x96>
 8004060:	230c      	movs	r3, #12
 8004062:	6033      	str	r3, [r6, #0]
 8004064:	4630      	mov	r0, r6
 8004066:	f000 fb4a 	bl	80046fe <__malloc_unlock>
 800406a:	e7e4      	b.n	8004036 <_malloc_r+0x1e>
 800406c:	680b      	ldr	r3, [r1, #0]
 800406e:	1b5b      	subs	r3, r3, r5
 8004070:	d41a      	bmi.n	80040a8 <_malloc_r+0x90>
 8004072:	2b0b      	cmp	r3, #11
 8004074:	d90f      	bls.n	8004096 <_malloc_r+0x7e>
 8004076:	600b      	str	r3, [r1, #0]
 8004078:	50cd      	str	r5, [r1, r3]
 800407a:	18cc      	adds	r4, r1, r3
 800407c:	4630      	mov	r0, r6
 800407e:	f000 fb3e 	bl	80046fe <__malloc_unlock>
 8004082:	f104 000b 	add.w	r0, r4, #11
 8004086:	1d23      	adds	r3, r4, #4
 8004088:	f020 0007 	bic.w	r0, r0, #7
 800408c:	1ac3      	subs	r3, r0, r3
 800408e:	d01b      	beq.n	80040c8 <_malloc_r+0xb0>
 8004090:	425a      	negs	r2, r3
 8004092:	50e2      	str	r2, [r4, r3]
 8004094:	bd70      	pop	{r4, r5, r6, pc}
 8004096:	428c      	cmp	r4, r1
 8004098:	bf0d      	iteet	eq
 800409a:	6863      	ldreq	r3, [r4, #4]
 800409c:	684b      	ldrne	r3, [r1, #4]
 800409e:	6063      	strne	r3, [r4, #4]
 80040a0:	6013      	streq	r3, [r2, #0]
 80040a2:	bf18      	it	ne
 80040a4:	460c      	movne	r4, r1
 80040a6:	e7e9      	b.n	800407c <_malloc_r+0x64>
 80040a8:	460c      	mov	r4, r1
 80040aa:	6849      	ldr	r1, [r1, #4]
 80040ac:	e7ca      	b.n	8004044 <_malloc_r+0x2c>
 80040ae:	1cc4      	adds	r4, r0, #3
 80040b0:	f024 0403 	bic.w	r4, r4, #3
 80040b4:	42a0      	cmp	r0, r4
 80040b6:	d005      	beq.n	80040c4 <_malloc_r+0xac>
 80040b8:	1a21      	subs	r1, r4, r0
 80040ba:	4630      	mov	r0, r6
 80040bc:	f000 f86e 	bl	800419c <_sbrk_r>
 80040c0:	3001      	adds	r0, #1
 80040c2:	d0cd      	beq.n	8004060 <_malloc_r+0x48>
 80040c4:	6025      	str	r5, [r4, #0]
 80040c6:	e7d9      	b.n	800407c <_malloc_r+0x64>
 80040c8:	bd70      	pop	{r4, r5, r6, pc}
 80040ca:	bf00      	nop
 80040cc:	20001e0c 	.word	0x20001e0c
 80040d0:	20001e10 	.word	0x20001e10

080040d4 <_puts_r>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	460e      	mov	r6, r1
 80040d8:	4605      	mov	r5, r0
 80040da:	b118      	cbz	r0, 80040e4 <_puts_r+0x10>
 80040dc:	6983      	ldr	r3, [r0, #24]
 80040de:	b90b      	cbnz	r3, 80040e4 <_puts_r+0x10>
 80040e0:	f000 fa1e 	bl	8004520 <__sinit>
 80040e4:	69ab      	ldr	r3, [r5, #24]
 80040e6:	68ac      	ldr	r4, [r5, #8]
 80040e8:	b913      	cbnz	r3, 80040f0 <_puts_r+0x1c>
 80040ea:	4628      	mov	r0, r5
 80040ec:	f000 fa18 	bl	8004520 <__sinit>
 80040f0:	4b23      	ldr	r3, [pc, #140]	; (8004180 <_puts_r+0xac>)
 80040f2:	429c      	cmp	r4, r3
 80040f4:	d117      	bne.n	8004126 <_puts_r+0x52>
 80040f6:	686c      	ldr	r4, [r5, #4]
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	071b      	lsls	r3, r3, #28
 80040fc:	d51d      	bpl.n	800413a <_puts_r+0x66>
 80040fe:	6923      	ldr	r3, [r4, #16]
 8004100:	b1db      	cbz	r3, 800413a <_puts_r+0x66>
 8004102:	3e01      	subs	r6, #1
 8004104:	68a3      	ldr	r3, [r4, #8]
 8004106:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800410a:	3b01      	subs	r3, #1
 800410c:	60a3      	str	r3, [r4, #8]
 800410e:	b9e9      	cbnz	r1, 800414c <_puts_r+0x78>
 8004110:	2b00      	cmp	r3, #0
 8004112:	da2e      	bge.n	8004172 <_puts_r+0x9e>
 8004114:	4622      	mov	r2, r4
 8004116:	210a      	movs	r1, #10
 8004118:	4628      	mov	r0, r5
 800411a:	f000 f84f 	bl	80041bc <__swbuf_r>
 800411e:	3001      	adds	r0, #1
 8004120:	d011      	beq.n	8004146 <_puts_r+0x72>
 8004122:	200a      	movs	r0, #10
 8004124:	bd70      	pop	{r4, r5, r6, pc}
 8004126:	4b17      	ldr	r3, [pc, #92]	; (8004184 <_puts_r+0xb0>)
 8004128:	429c      	cmp	r4, r3
 800412a:	d101      	bne.n	8004130 <_puts_r+0x5c>
 800412c:	68ac      	ldr	r4, [r5, #8]
 800412e:	e7e3      	b.n	80040f8 <_puts_r+0x24>
 8004130:	4b15      	ldr	r3, [pc, #84]	; (8004188 <_puts_r+0xb4>)
 8004132:	429c      	cmp	r4, r3
 8004134:	bf08      	it	eq
 8004136:	68ec      	ldreq	r4, [r5, #12]
 8004138:	e7de      	b.n	80040f8 <_puts_r+0x24>
 800413a:	4621      	mov	r1, r4
 800413c:	4628      	mov	r0, r5
 800413e:	f000 f88f 	bl	8004260 <__swsetup_r>
 8004142:	2800      	cmp	r0, #0
 8004144:	d0dd      	beq.n	8004102 <_puts_r+0x2e>
 8004146:	f04f 30ff 	mov.w	r0, #4294967295
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	2b00      	cmp	r3, #0
 800414e:	da04      	bge.n	800415a <_puts_r+0x86>
 8004150:	69a2      	ldr	r2, [r4, #24]
 8004152:	4293      	cmp	r3, r2
 8004154:	db06      	blt.n	8004164 <_puts_r+0x90>
 8004156:	290a      	cmp	r1, #10
 8004158:	d004      	beq.n	8004164 <_puts_r+0x90>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	6022      	str	r2, [r4, #0]
 8004160:	7019      	strb	r1, [r3, #0]
 8004162:	e7cf      	b.n	8004104 <_puts_r+0x30>
 8004164:	4622      	mov	r2, r4
 8004166:	4628      	mov	r0, r5
 8004168:	f000 f828 	bl	80041bc <__swbuf_r>
 800416c:	3001      	adds	r0, #1
 800416e:	d1c9      	bne.n	8004104 <_puts_r+0x30>
 8004170:	e7e9      	b.n	8004146 <_puts_r+0x72>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	200a      	movs	r0, #10
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	6022      	str	r2, [r4, #0]
 800417a:	7018      	strb	r0, [r3, #0]
 800417c:	bd70      	pop	{r4, r5, r6, pc}
 800417e:	bf00      	nop
 8004180:	080049ec 	.word	0x080049ec
 8004184:	08004a0c 	.word	0x08004a0c
 8004188:	080049cc 	.word	0x080049cc

0800418c <puts>:
 800418c:	4b02      	ldr	r3, [pc, #8]	; (8004198 <puts+0xc>)
 800418e:	4601      	mov	r1, r0
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	f7ff bf9f 	b.w	80040d4 <_puts_r>
 8004196:	bf00      	nop
 8004198:	20000018 	.word	0x20000018

0800419c <_sbrk_r>:
 800419c:	b538      	push	{r3, r4, r5, lr}
 800419e:	4c06      	ldr	r4, [pc, #24]	; (80041b8 <_sbrk_r+0x1c>)
 80041a0:	2300      	movs	r3, #0
 80041a2:	4605      	mov	r5, r0
 80041a4:	4608      	mov	r0, r1
 80041a6:	6023      	str	r3, [r4, #0]
 80041a8:	f7ff fb5e 	bl	8003868 <_sbrk>
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	d102      	bne.n	80041b6 <_sbrk_r+0x1a>
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	b103      	cbz	r3, 80041b6 <_sbrk_r+0x1a>
 80041b4:	602b      	str	r3, [r5, #0]
 80041b6:	bd38      	pop	{r3, r4, r5, pc}
 80041b8:	20001ee8 	.word	0x20001ee8

080041bc <__swbuf_r>:
 80041bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041be:	460e      	mov	r6, r1
 80041c0:	4614      	mov	r4, r2
 80041c2:	4605      	mov	r5, r0
 80041c4:	b118      	cbz	r0, 80041ce <__swbuf_r+0x12>
 80041c6:	6983      	ldr	r3, [r0, #24]
 80041c8:	b90b      	cbnz	r3, 80041ce <__swbuf_r+0x12>
 80041ca:	f000 f9a9 	bl	8004520 <__sinit>
 80041ce:	4b21      	ldr	r3, [pc, #132]	; (8004254 <__swbuf_r+0x98>)
 80041d0:	429c      	cmp	r4, r3
 80041d2:	d12a      	bne.n	800422a <__swbuf_r+0x6e>
 80041d4:	686c      	ldr	r4, [r5, #4]
 80041d6:	69a3      	ldr	r3, [r4, #24]
 80041d8:	60a3      	str	r3, [r4, #8]
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	071a      	lsls	r2, r3, #28
 80041de:	d52e      	bpl.n	800423e <__swbuf_r+0x82>
 80041e0:	6923      	ldr	r3, [r4, #16]
 80041e2:	b363      	cbz	r3, 800423e <__swbuf_r+0x82>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	6820      	ldr	r0, [r4, #0]
 80041e8:	1ac0      	subs	r0, r0, r3
 80041ea:	6963      	ldr	r3, [r4, #20]
 80041ec:	b2f6      	uxtb	r6, r6
 80041ee:	4298      	cmp	r0, r3
 80041f0:	4637      	mov	r7, r6
 80041f2:	db04      	blt.n	80041fe <__swbuf_r+0x42>
 80041f4:	4621      	mov	r1, r4
 80041f6:	4628      	mov	r0, r5
 80041f8:	f000 f928 	bl	800444c <_fflush_r>
 80041fc:	bb28      	cbnz	r0, 800424a <__swbuf_r+0x8e>
 80041fe:	68a3      	ldr	r3, [r4, #8]
 8004200:	3b01      	subs	r3, #1
 8004202:	60a3      	str	r3, [r4, #8]
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	6022      	str	r2, [r4, #0]
 800420a:	701e      	strb	r6, [r3, #0]
 800420c:	6963      	ldr	r3, [r4, #20]
 800420e:	3001      	adds	r0, #1
 8004210:	4298      	cmp	r0, r3
 8004212:	d004      	beq.n	800421e <__swbuf_r+0x62>
 8004214:	89a3      	ldrh	r3, [r4, #12]
 8004216:	07db      	lsls	r3, r3, #31
 8004218:	d519      	bpl.n	800424e <__swbuf_r+0x92>
 800421a:	2e0a      	cmp	r6, #10
 800421c:	d117      	bne.n	800424e <__swbuf_r+0x92>
 800421e:	4621      	mov	r1, r4
 8004220:	4628      	mov	r0, r5
 8004222:	f000 f913 	bl	800444c <_fflush_r>
 8004226:	b190      	cbz	r0, 800424e <__swbuf_r+0x92>
 8004228:	e00f      	b.n	800424a <__swbuf_r+0x8e>
 800422a:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <__swbuf_r+0x9c>)
 800422c:	429c      	cmp	r4, r3
 800422e:	d101      	bne.n	8004234 <__swbuf_r+0x78>
 8004230:	68ac      	ldr	r4, [r5, #8]
 8004232:	e7d0      	b.n	80041d6 <__swbuf_r+0x1a>
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <__swbuf_r+0xa0>)
 8004236:	429c      	cmp	r4, r3
 8004238:	bf08      	it	eq
 800423a:	68ec      	ldreq	r4, [r5, #12]
 800423c:	e7cb      	b.n	80041d6 <__swbuf_r+0x1a>
 800423e:	4621      	mov	r1, r4
 8004240:	4628      	mov	r0, r5
 8004242:	f000 f80d 	bl	8004260 <__swsetup_r>
 8004246:	2800      	cmp	r0, #0
 8004248:	d0cc      	beq.n	80041e4 <__swbuf_r+0x28>
 800424a:	f04f 37ff 	mov.w	r7, #4294967295
 800424e:	4638      	mov	r0, r7
 8004250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004252:	bf00      	nop
 8004254:	080049ec 	.word	0x080049ec
 8004258:	08004a0c 	.word	0x08004a0c
 800425c:	080049cc 	.word	0x080049cc

08004260 <__swsetup_r>:
 8004260:	4b32      	ldr	r3, [pc, #200]	; (800432c <__swsetup_r+0xcc>)
 8004262:	b570      	push	{r4, r5, r6, lr}
 8004264:	681d      	ldr	r5, [r3, #0]
 8004266:	4606      	mov	r6, r0
 8004268:	460c      	mov	r4, r1
 800426a:	b125      	cbz	r5, 8004276 <__swsetup_r+0x16>
 800426c:	69ab      	ldr	r3, [r5, #24]
 800426e:	b913      	cbnz	r3, 8004276 <__swsetup_r+0x16>
 8004270:	4628      	mov	r0, r5
 8004272:	f000 f955 	bl	8004520 <__sinit>
 8004276:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <__swsetup_r+0xd0>)
 8004278:	429c      	cmp	r4, r3
 800427a:	d10f      	bne.n	800429c <__swsetup_r+0x3c>
 800427c:	686c      	ldr	r4, [r5, #4]
 800427e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004282:	b29a      	uxth	r2, r3
 8004284:	0715      	lsls	r5, r2, #28
 8004286:	d42c      	bmi.n	80042e2 <__swsetup_r+0x82>
 8004288:	06d0      	lsls	r0, r2, #27
 800428a:	d411      	bmi.n	80042b0 <__swsetup_r+0x50>
 800428c:	2209      	movs	r2, #9
 800428e:	6032      	str	r2, [r6, #0]
 8004290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004294:	81a3      	strh	r3, [r4, #12]
 8004296:	f04f 30ff 	mov.w	r0, #4294967295
 800429a:	bd70      	pop	{r4, r5, r6, pc}
 800429c:	4b25      	ldr	r3, [pc, #148]	; (8004334 <__swsetup_r+0xd4>)
 800429e:	429c      	cmp	r4, r3
 80042a0:	d101      	bne.n	80042a6 <__swsetup_r+0x46>
 80042a2:	68ac      	ldr	r4, [r5, #8]
 80042a4:	e7eb      	b.n	800427e <__swsetup_r+0x1e>
 80042a6:	4b24      	ldr	r3, [pc, #144]	; (8004338 <__swsetup_r+0xd8>)
 80042a8:	429c      	cmp	r4, r3
 80042aa:	bf08      	it	eq
 80042ac:	68ec      	ldreq	r4, [r5, #12]
 80042ae:	e7e6      	b.n	800427e <__swsetup_r+0x1e>
 80042b0:	0751      	lsls	r1, r2, #29
 80042b2:	d512      	bpl.n	80042da <__swsetup_r+0x7a>
 80042b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042b6:	b141      	cbz	r1, 80042ca <__swsetup_r+0x6a>
 80042b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042bc:	4299      	cmp	r1, r3
 80042be:	d002      	beq.n	80042c6 <__swsetup_r+0x66>
 80042c0:	4630      	mov	r0, r6
 80042c2:	f7ff fe5b 	bl	8003f7c <_free_r>
 80042c6:	2300      	movs	r3, #0
 80042c8:	6363      	str	r3, [r4, #52]	; 0x34
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042d0:	81a3      	strh	r3, [r4, #12]
 80042d2:	2300      	movs	r3, #0
 80042d4:	6063      	str	r3, [r4, #4]
 80042d6:	6923      	ldr	r3, [r4, #16]
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	f043 0308 	orr.w	r3, r3, #8
 80042e0:	81a3      	strh	r3, [r4, #12]
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	b94b      	cbnz	r3, 80042fa <__swsetup_r+0x9a>
 80042e6:	89a3      	ldrh	r3, [r4, #12]
 80042e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80042ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042f0:	d003      	beq.n	80042fa <__swsetup_r+0x9a>
 80042f2:	4621      	mov	r1, r4
 80042f4:	4630      	mov	r0, r6
 80042f6:	f000 f9c1 	bl	800467c <__smakebuf_r>
 80042fa:	89a2      	ldrh	r2, [r4, #12]
 80042fc:	f012 0301 	ands.w	r3, r2, #1
 8004300:	d00c      	beq.n	800431c <__swsetup_r+0xbc>
 8004302:	2300      	movs	r3, #0
 8004304:	60a3      	str	r3, [r4, #8]
 8004306:	6963      	ldr	r3, [r4, #20]
 8004308:	425b      	negs	r3, r3
 800430a:	61a3      	str	r3, [r4, #24]
 800430c:	6923      	ldr	r3, [r4, #16]
 800430e:	b953      	cbnz	r3, 8004326 <__swsetup_r+0xc6>
 8004310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004314:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004318:	d1ba      	bne.n	8004290 <__swsetup_r+0x30>
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	0792      	lsls	r2, r2, #30
 800431e:	bf58      	it	pl
 8004320:	6963      	ldrpl	r3, [r4, #20]
 8004322:	60a3      	str	r3, [r4, #8]
 8004324:	e7f2      	b.n	800430c <__swsetup_r+0xac>
 8004326:	2000      	movs	r0, #0
 8004328:	e7f7      	b.n	800431a <__swsetup_r+0xba>
 800432a:	bf00      	nop
 800432c:	20000018 	.word	0x20000018
 8004330:	080049ec 	.word	0x080049ec
 8004334:	08004a0c 	.word	0x08004a0c
 8004338:	080049cc 	.word	0x080049cc

0800433c <__sflush_r>:
 800433c:	898a      	ldrh	r2, [r1, #12]
 800433e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004342:	4605      	mov	r5, r0
 8004344:	0710      	lsls	r0, r2, #28
 8004346:	460c      	mov	r4, r1
 8004348:	d45a      	bmi.n	8004400 <__sflush_r+0xc4>
 800434a:	684b      	ldr	r3, [r1, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	dc05      	bgt.n	800435c <__sflush_r+0x20>
 8004350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	dc02      	bgt.n	800435c <__sflush_r+0x20>
 8004356:	2000      	movs	r0, #0
 8004358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800435c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800435e:	2e00      	cmp	r6, #0
 8004360:	d0f9      	beq.n	8004356 <__sflush_r+0x1a>
 8004362:	2300      	movs	r3, #0
 8004364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004368:	682f      	ldr	r7, [r5, #0]
 800436a:	602b      	str	r3, [r5, #0]
 800436c:	d033      	beq.n	80043d6 <__sflush_r+0x9a>
 800436e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004370:	89a3      	ldrh	r3, [r4, #12]
 8004372:	075a      	lsls	r2, r3, #29
 8004374:	d505      	bpl.n	8004382 <__sflush_r+0x46>
 8004376:	6863      	ldr	r3, [r4, #4]
 8004378:	1ac0      	subs	r0, r0, r3
 800437a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800437c:	b10b      	cbz	r3, 8004382 <__sflush_r+0x46>
 800437e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004380:	1ac0      	subs	r0, r0, r3
 8004382:	2300      	movs	r3, #0
 8004384:	4602      	mov	r2, r0
 8004386:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004388:	6a21      	ldr	r1, [r4, #32]
 800438a:	4628      	mov	r0, r5
 800438c:	47b0      	blx	r6
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	89a3      	ldrh	r3, [r4, #12]
 8004392:	d106      	bne.n	80043a2 <__sflush_r+0x66>
 8004394:	6829      	ldr	r1, [r5, #0]
 8004396:	291d      	cmp	r1, #29
 8004398:	d84b      	bhi.n	8004432 <__sflush_r+0xf6>
 800439a:	4a2b      	ldr	r2, [pc, #172]	; (8004448 <__sflush_r+0x10c>)
 800439c:	40ca      	lsrs	r2, r1
 800439e:	07d6      	lsls	r6, r2, #31
 80043a0:	d547      	bpl.n	8004432 <__sflush_r+0xf6>
 80043a2:	2200      	movs	r2, #0
 80043a4:	6062      	str	r2, [r4, #4]
 80043a6:	04d9      	lsls	r1, r3, #19
 80043a8:	6922      	ldr	r2, [r4, #16]
 80043aa:	6022      	str	r2, [r4, #0]
 80043ac:	d504      	bpl.n	80043b8 <__sflush_r+0x7c>
 80043ae:	1c42      	adds	r2, r0, #1
 80043b0:	d101      	bne.n	80043b6 <__sflush_r+0x7a>
 80043b2:	682b      	ldr	r3, [r5, #0]
 80043b4:	b903      	cbnz	r3, 80043b8 <__sflush_r+0x7c>
 80043b6:	6560      	str	r0, [r4, #84]	; 0x54
 80043b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ba:	602f      	str	r7, [r5, #0]
 80043bc:	2900      	cmp	r1, #0
 80043be:	d0ca      	beq.n	8004356 <__sflush_r+0x1a>
 80043c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043c4:	4299      	cmp	r1, r3
 80043c6:	d002      	beq.n	80043ce <__sflush_r+0x92>
 80043c8:	4628      	mov	r0, r5
 80043ca:	f7ff fdd7 	bl	8003f7c <_free_r>
 80043ce:	2000      	movs	r0, #0
 80043d0:	6360      	str	r0, [r4, #52]	; 0x34
 80043d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043d6:	6a21      	ldr	r1, [r4, #32]
 80043d8:	2301      	movs	r3, #1
 80043da:	4628      	mov	r0, r5
 80043dc:	47b0      	blx	r6
 80043de:	1c41      	adds	r1, r0, #1
 80043e0:	d1c6      	bne.n	8004370 <__sflush_r+0x34>
 80043e2:	682b      	ldr	r3, [r5, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0c3      	beq.n	8004370 <__sflush_r+0x34>
 80043e8:	2b1d      	cmp	r3, #29
 80043ea:	d001      	beq.n	80043f0 <__sflush_r+0xb4>
 80043ec:	2b16      	cmp	r3, #22
 80043ee:	d101      	bne.n	80043f4 <__sflush_r+0xb8>
 80043f0:	602f      	str	r7, [r5, #0]
 80043f2:	e7b0      	b.n	8004356 <__sflush_r+0x1a>
 80043f4:	89a3      	ldrh	r3, [r4, #12]
 80043f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043fa:	81a3      	strh	r3, [r4, #12]
 80043fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004400:	690f      	ldr	r7, [r1, #16]
 8004402:	2f00      	cmp	r7, #0
 8004404:	d0a7      	beq.n	8004356 <__sflush_r+0x1a>
 8004406:	0793      	lsls	r3, r2, #30
 8004408:	680e      	ldr	r6, [r1, #0]
 800440a:	bf08      	it	eq
 800440c:	694b      	ldreq	r3, [r1, #20]
 800440e:	600f      	str	r7, [r1, #0]
 8004410:	bf18      	it	ne
 8004412:	2300      	movne	r3, #0
 8004414:	eba6 0807 	sub.w	r8, r6, r7
 8004418:	608b      	str	r3, [r1, #8]
 800441a:	f1b8 0f00 	cmp.w	r8, #0
 800441e:	dd9a      	ble.n	8004356 <__sflush_r+0x1a>
 8004420:	4643      	mov	r3, r8
 8004422:	463a      	mov	r2, r7
 8004424:	6a21      	ldr	r1, [r4, #32]
 8004426:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004428:	4628      	mov	r0, r5
 800442a:	47b0      	blx	r6
 800442c:	2800      	cmp	r0, #0
 800442e:	dc07      	bgt.n	8004440 <__sflush_r+0x104>
 8004430:	89a3      	ldrh	r3, [r4, #12]
 8004432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004436:	81a3      	strh	r3, [r4, #12]
 8004438:	f04f 30ff 	mov.w	r0, #4294967295
 800443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004440:	4407      	add	r7, r0
 8004442:	eba8 0800 	sub.w	r8, r8, r0
 8004446:	e7e8      	b.n	800441a <__sflush_r+0xde>
 8004448:	20400001 	.word	0x20400001

0800444c <_fflush_r>:
 800444c:	b538      	push	{r3, r4, r5, lr}
 800444e:	690b      	ldr	r3, [r1, #16]
 8004450:	4605      	mov	r5, r0
 8004452:	460c      	mov	r4, r1
 8004454:	b1db      	cbz	r3, 800448e <_fflush_r+0x42>
 8004456:	b118      	cbz	r0, 8004460 <_fflush_r+0x14>
 8004458:	6983      	ldr	r3, [r0, #24]
 800445a:	b90b      	cbnz	r3, 8004460 <_fflush_r+0x14>
 800445c:	f000 f860 	bl	8004520 <__sinit>
 8004460:	4b0c      	ldr	r3, [pc, #48]	; (8004494 <_fflush_r+0x48>)
 8004462:	429c      	cmp	r4, r3
 8004464:	d109      	bne.n	800447a <_fflush_r+0x2e>
 8004466:	686c      	ldr	r4, [r5, #4]
 8004468:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800446c:	b17b      	cbz	r3, 800448e <_fflush_r+0x42>
 800446e:	4621      	mov	r1, r4
 8004470:	4628      	mov	r0, r5
 8004472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004476:	f7ff bf61 	b.w	800433c <__sflush_r>
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <_fflush_r+0x4c>)
 800447c:	429c      	cmp	r4, r3
 800447e:	d101      	bne.n	8004484 <_fflush_r+0x38>
 8004480:	68ac      	ldr	r4, [r5, #8]
 8004482:	e7f1      	b.n	8004468 <_fflush_r+0x1c>
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <_fflush_r+0x50>)
 8004486:	429c      	cmp	r4, r3
 8004488:	bf08      	it	eq
 800448a:	68ec      	ldreq	r4, [r5, #12]
 800448c:	e7ec      	b.n	8004468 <_fflush_r+0x1c>
 800448e:	2000      	movs	r0, #0
 8004490:	bd38      	pop	{r3, r4, r5, pc}
 8004492:	bf00      	nop
 8004494:	080049ec 	.word	0x080049ec
 8004498:	08004a0c 	.word	0x08004a0c
 800449c:	080049cc 	.word	0x080049cc

080044a0 <_cleanup_r>:
 80044a0:	4901      	ldr	r1, [pc, #4]	; (80044a8 <_cleanup_r+0x8>)
 80044a2:	f000 b8a9 	b.w	80045f8 <_fwalk_reent>
 80044a6:	bf00      	nop
 80044a8:	0800444d 	.word	0x0800444d

080044ac <std.isra.0>:
 80044ac:	2300      	movs	r3, #0
 80044ae:	b510      	push	{r4, lr}
 80044b0:	4604      	mov	r4, r0
 80044b2:	6003      	str	r3, [r0, #0]
 80044b4:	6043      	str	r3, [r0, #4]
 80044b6:	6083      	str	r3, [r0, #8]
 80044b8:	8181      	strh	r1, [r0, #12]
 80044ba:	6643      	str	r3, [r0, #100]	; 0x64
 80044bc:	81c2      	strh	r2, [r0, #14]
 80044be:	6103      	str	r3, [r0, #16]
 80044c0:	6143      	str	r3, [r0, #20]
 80044c2:	6183      	str	r3, [r0, #24]
 80044c4:	4619      	mov	r1, r3
 80044c6:	2208      	movs	r2, #8
 80044c8:	305c      	adds	r0, #92	; 0x5c
 80044ca:	f7ff fd4e 	bl	8003f6a <memset>
 80044ce:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <std.isra.0+0x38>)
 80044d0:	6263      	str	r3, [r4, #36]	; 0x24
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <std.isra.0+0x3c>)
 80044d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80044d6:	4b05      	ldr	r3, [pc, #20]	; (80044ec <std.isra.0+0x40>)
 80044d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <std.isra.0+0x44>)
 80044dc:	6224      	str	r4, [r4, #32]
 80044de:	6323      	str	r3, [r4, #48]	; 0x30
 80044e0:	bd10      	pop	{r4, pc}
 80044e2:	bf00      	nop
 80044e4:	08004701 	.word	0x08004701
 80044e8:	08004723 	.word	0x08004723
 80044ec:	0800475b 	.word	0x0800475b
 80044f0:	0800477f 	.word	0x0800477f

080044f4 <__sfmoreglue>:
 80044f4:	b570      	push	{r4, r5, r6, lr}
 80044f6:	1e4a      	subs	r2, r1, #1
 80044f8:	2568      	movs	r5, #104	; 0x68
 80044fa:	4355      	muls	r5, r2
 80044fc:	460e      	mov	r6, r1
 80044fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004502:	f7ff fd89 	bl	8004018 <_malloc_r>
 8004506:	4604      	mov	r4, r0
 8004508:	b140      	cbz	r0, 800451c <__sfmoreglue+0x28>
 800450a:	2100      	movs	r1, #0
 800450c:	e880 0042 	stmia.w	r0, {r1, r6}
 8004510:	300c      	adds	r0, #12
 8004512:	60a0      	str	r0, [r4, #8]
 8004514:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004518:	f7ff fd27 	bl	8003f6a <memset>
 800451c:	4620      	mov	r0, r4
 800451e:	bd70      	pop	{r4, r5, r6, pc}

08004520 <__sinit>:
 8004520:	6983      	ldr	r3, [r0, #24]
 8004522:	b510      	push	{r4, lr}
 8004524:	4604      	mov	r4, r0
 8004526:	bb33      	cbnz	r3, 8004576 <__sinit+0x56>
 8004528:	6483      	str	r3, [r0, #72]	; 0x48
 800452a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800452c:	6503      	str	r3, [r0, #80]	; 0x50
 800452e:	4b12      	ldr	r3, [pc, #72]	; (8004578 <__sinit+0x58>)
 8004530:	4a12      	ldr	r2, [pc, #72]	; (800457c <__sinit+0x5c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6282      	str	r2, [r0, #40]	; 0x28
 8004536:	4298      	cmp	r0, r3
 8004538:	bf04      	itt	eq
 800453a:	2301      	moveq	r3, #1
 800453c:	6183      	streq	r3, [r0, #24]
 800453e:	f000 f81f 	bl	8004580 <__sfp>
 8004542:	6060      	str	r0, [r4, #4]
 8004544:	4620      	mov	r0, r4
 8004546:	f000 f81b 	bl	8004580 <__sfp>
 800454a:	60a0      	str	r0, [r4, #8]
 800454c:	4620      	mov	r0, r4
 800454e:	f000 f817 	bl	8004580 <__sfp>
 8004552:	2200      	movs	r2, #0
 8004554:	60e0      	str	r0, [r4, #12]
 8004556:	2104      	movs	r1, #4
 8004558:	6860      	ldr	r0, [r4, #4]
 800455a:	f7ff ffa7 	bl	80044ac <std.isra.0>
 800455e:	2201      	movs	r2, #1
 8004560:	2109      	movs	r1, #9
 8004562:	68a0      	ldr	r0, [r4, #8]
 8004564:	f7ff ffa2 	bl	80044ac <std.isra.0>
 8004568:	2202      	movs	r2, #2
 800456a:	2112      	movs	r1, #18
 800456c:	68e0      	ldr	r0, [r4, #12]
 800456e:	f7ff ff9d 	bl	80044ac <std.isra.0>
 8004572:	2301      	movs	r3, #1
 8004574:	61a3      	str	r3, [r4, #24]
 8004576:	bd10      	pop	{r4, pc}
 8004578:	08004a2c 	.word	0x08004a2c
 800457c:	080044a1 	.word	0x080044a1

08004580 <__sfp>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	4b1c      	ldr	r3, [pc, #112]	; (80045f4 <__sfp+0x74>)
 8004584:	681e      	ldr	r6, [r3, #0]
 8004586:	69b3      	ldr	r3, [r6, #24]
 8004588:	4607      	mov	r7, r0
 800458a:	b913      	cbnz	r3, 8004592 <__sfp+0x12>
 800458c:	4630      	mov	r0, r6
 800458e:	f7ff ffc7 	bl	8004520 <__sinit>
 8004592:	3648      	adds	r6, #72	; 0x48
 8004594:	68b4      	ldr	r4, [r6, #8]
 8004596:	6873      	ldr	r3, [r6, #4]
 8004598:	3b01      	subs	r3, #1
 800459a:	d503      	bpl.n	80045a4 <__sfp+0x24>
 800459c:	6833      	ldr	r3, [r6, #0]
 800459e:	b133      	cbz	r3, 80045ae <__sfp+0x2e>
 80045a0:	6836      	ldr	r6, [r6, #0]
 80045a2:	e7f7      	b.n	8004594 <__sfp+0x14>
 80045a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045a8:	b16d      	cbz	r5, 80045c6 <__sfp+0x46>
 80045aa:	3468      	adds	r4, #104	; 0x68
 80045ac:	e7f4      	b.n	8004598 <__sfp+0x18>
 80045ae:	2104      	movs	r1, #4
 80045b0:	4638      	mov	r0, r7
 80045b2:	f7ff ff9f 	bl	80044f4 <__sfmoreglue>
 80045b6:	6030      	str	r0, [r6, #0]
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d1f1      	bne.n	80045a0 <__sfp+0x20>
 80045bc:	230c      	movs	r3, #12
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	4604      	mov	r4, r0
 80045c2:	4620      	mov	r0, r4
 80045c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045ca:	81e3      	strh	r3, [r4, #14]
 80045cc:	2301      	movs	r3, #1
 80045ce:	81a3      	strh	r3, [r4, #12]
 80045d0:	6665      	str	r5, [r4, #100]	; 0x64
 80045d2:	6025      	str	r5, [r4, #0]
 80045d4:	60a5      	str	r5, [r4, #8]
 80045d6:	6065      	str	r5, [r4, #4]
 80045d8:	6125      	str	r5, [r4, #16]
 80045da:	6165      	str	r5, [r4, #20]
 80045dc:	61a5      	str	r5, [r4, #24]
 80045de:	2208      	movs	r2, #8
 80045e0:	4629      	mov	r1, r5
 80045e2:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045e6:	f7ff fcc0 	bl	8003f6a <memset>
 80045ea:	6365      	str	r5, [r4, #52]	; 0x34
 80045ec:	63a5      	str	r5, [r4, #56]	; 0x38
 80045ee:	64a5      	str	r5, [r4, #72]	; 0x48
 80045f0:	64e5      	str	r5, [r4, #76]	; 0x4c
 80045f2:	e7e6      	b.n	80045c2 <__sfp+0x42>
 80045f4:	08004a2c 	.word	0x08004a2c

080045f8 <_fwalk_reent>:
 80045f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045fc:	4680      	mov	r8, r0
 80045fe:	4689      	mov	r9, r1
 8004600:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004604:	2600      	movs	r6, #0
 8004606:	b914      	cbnz	r4, 800460e <_fwalk_reent+0x16>
 8004608:	4630      	mov	r0, r6
 800460a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800460e:	68a5      	ldr	r5, [r4, #8]
 8004610:	6867      	ldr	r7, [r4, #4]
 8004612:	3f01      	subs	r7, #1
 8004614:	d501      	bpl.n	800461a <_fwalk_reent+0x22>
 8004616:	6824      	ldr	r4, [r4, #0]
 8004618:	e7f5      	b.n	8004606 <_fwalk_reent+0xe>
 800461a:	89ab      	ldrh	r3, [r5, #12]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d907      	bls.n	8004630 <_fwalk_reent+0x38>
 8004620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004624:	3301      	adds	r3, #1
 8004626:	d003      	beq.n	8004630 <_fwalk_reent+0x38>
 8004628:	4629      	mov	r1, r5
 800462a:	4640      	mov	r0, r8
 800462c:	47c8      	blx	r9
 800462e:	4306      	orrs	r6, r0
 8004630:	3568      	adds	r5, #104	; 0x68
 8004632:	e7ee      	b.n	8004612 <_fwalk_reent+0x1a>

08004634 <__swhatbuf_r>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	460e      	mov	r6, r1
 8004638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800463c:	2900      	cmp	r1, #0
 800463e:	b090      	sub	sp, #64	; 0x40
 8004640:	4614      	mov	r4, r2
 8004642:	461d      	mov	r5, r3
 8004644:	da07      	bge.n	8004656 <__swhatbuf_r+0x22>
 8004646:	2300      	movs	r3, #0
 8004648:	602b      	str	r3, [r5, #0]
 800464a:	89b3      	ldrh	r3, [r6, #12]
 800464c:	061a      	lsls	r2, r3, #24
 800464e:	d410      	bmi.n	8004672 <__swhatbuf_r+0x3e>
 8004650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004654:	e00e      	b.n	8004674 <__swhatbuf_r+0x40>
 8004656:	aa01      	add	r2, sp, #4
 8004658:	f000 f8b8 	bl	80047cc <_fstat_r>
 800465c:	2800      	cmp	r0, #0
 800465e:	dbf2      	blt.n	8004646 <__swhatbuf_r+0x12>
 8004660:	9a02      	ldr	r2, [sp, #8]
 8004662:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004666:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800466a:	425a      	negs	r2, r3
 800466c:	415a      	adcs	r2, r3
 800466e:	602a      	str	r2, [r5, #0]
 8004670:	e7ee      	b.n	8004650 <__swhatbuf_r+0x1c>
 8004672:	2340      	movs	r3, #64	; 0x40
 8004674:	2000      	movs	r0, #0
 8004676:	6023      	str	r3, [r4, #0]
 8004678:	b010      	add	sp, #64	; 0x40
 800467a:	bd70      	pop	{r4, r5, r6, pc}

0800467c <__smakebuf_r>:
 800467c:	898b      	ldrh	r3, [r1, #12]
 800467e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004680:	079d      	lsls	r5, r3, #30
 8004682:	4606      	mov	r6, r0
 8004684:	460c      	mov	r4, r1
 8004686:	d507      	bpl.n	8004698 <__smakebuf_r+0x1c>
 8004688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	6123      	str	r3, [r4, #16]
 8004690:	2301      	movs	r3, #1
 8004692:	6163      	str	r3, [r4, #20]
 8004694:	b002      	add	sp, #8
 8004696:	bd70      	pop	{r4, r5, r6, pc}
 8004698:	ab01      	add	r3, sp, #4
 800469a:	466a      	mov	r2, sp
 800469c:	f7ff ffca 	bl	8004634 <__swhatbuf_r>
 80046a0:	9900      	ldr	r1, [sp, #0]
 80046a2:	4605      	mov	r5, r0
 80046a4:	4630      	mov	r0, r6
 80046a6:	f7ff fcb7 	bl	8004018 <_malloc_r>
 80046aa:	b948      	cbnz	r0, 80046c0 <__smakebuf_r+0x44>
 80046ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b0:	059a      	lsls	r2, r3, #22
 80046b2:	d4ef      	bmi.n	8004694 <__smakebuf_r+0x18>
 80046b4:	f023 0303 	bic.w	r3, r3, #3
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	81a3      	strh	r3, [r4, #12]
 80046be:	e7e3      	b.n	8004688 <__smakebuf_r+0xc>
 80046c0:	4b0d      	ldr	r3, [pc, #52]	; (80046f8 <__smakebuf_r+0x7c>)
 80046c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80046c4:	89a3      	ldrh	r3, [r4, #12]
 80046c6:	6020      	str	r0, [r4, #0]
 80046c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	9b00      	ldr	r3, [sp, #0]
 80046d0:	6163      	str	r3, [r4, #20]
 80046d2:	9b01      	ldr	r3, [sp, #4]
 80046d4:	6120      	str	r0, [r4, #16]
 80046d6:	b15b      	cbz	r3, 80046f0 <__smakebuf_r+0x74>
 80046d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046dc:	4630      	mov	r0, r6
 80046de:	f000 f887 	bl	80047f0 <_isatty_r>
 80046e2:	b128      	cbz	r0, 80046f0 <__smakebuf_r+0x74>
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	431d      	orrs	r5, r3
 80046f4:	81a5      	strh	r5, [r4, #12]
 80046f6:	e7cd      	b.n	8004694 <__smakebuf_r+0x18>
 80046f8:	080044a1 	.word	0x080044a1

080046fc <__malloc_lock>:
 80046fc:	4770      	bx	lr

080046fe <__malloc_unlock>:
 80046fe:	4770      	bx	lr

08004700 <__sread>:
 8004700:	b510      	push	{r4, lr}
 8004702:	460c      	mov	r4, r1
 8004704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004708:	f000 f894 	bl	8004834 <_read_r>
 800470c:	2800      	cmp	r0, #0
 800470e:	bfab      	itete	ge
 8004710:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004712:	89a3      	ldrhlt	r3, [r4, #12]
 8004714:	181b      	addge	r3, r3, r0
 8004716:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800471a:	bfac      	ite	ge
 800471c:	6563      	strge	r3, [r4, #84]	; 0x54
 800471e:	81a3      	strhlt	r3, [r4, #12]
 8004720:	bd10      	pop	{r4, pc}

08004722 <__swrite>:
 8004722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004726:	461f      	mov	r7, r3
 8004728:	898b      	ldrh	r3, [r1, #12]
 800472a:	05db      	lsls	r3, r3, #23
 800472c:	4605      	mov	r5, r0
 800472e:	460c      	mov	r4, r1
 8004730:	4616      	mov	r6, r2
 8004732:	d505      	bpl.n	8004740 <__swrite+0x1e>
 8004734:	2302      	movs	r3, #2
 8004736:	2200      	movs	r2, #0
 8004738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800473c:	f000 f868 	bl	8004810 <_lseek_r>
 8004740:	89a3      	ldrh	r3, [r4, #12]
 8004742:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004746:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800474a:	81a3      	strh	r3, [r4, #12]
 800474c:	4632      	mov	r2, r6
 800474e:	463b      	mov	r3, r7
 8004750:	4628      	mov	r0, r5
 8004752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004756:	f000 b817 	b.w	8004788 <_write_r>

0800475a <__sseek>:
 800475a:	b510      	push	{r4, lr}
 800475c:	460c      	mov	r4, r1
 800475e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004762:	f000 f855 	bl	8004810 <_lseek_r>
 8004766:	1c43      	adds	r3, r0, #1
 8004768:	89a3      	ldrh	r3, [r4, #12]
 800476a:	bf15      	itete	ne
 800476c:	6560      	strne	r0, [r4, #84]	; 0x54
 800476e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004772:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004776:	81a3      	strheq	r3, [r4, #12]
 8004778:	bf18      	it	ne
 800477a:	81a3      	strhne	r3, [r4, #12]
 800477c:	bd10      	pop	{r4, pc}

0800477e <__sclose>:
 800477e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004782:	f000 b813 	b.w	80047ac <_close_r>
	...

08004788 <_write_r>:
 8004788:	b538      	push	{r3, r4, r5, lr}
 800478a:	4c07      	ldr	r4, [pc, #28]	; (80047a8 <_write_r+0x20>)
 800478c:	4605      	mov	r5, r0
 800478e:	4608      	mov	r0, r1
 8004790:	4611      	mov	r1, r2
 8004792:	2200      	movs	r2, #0
 8004794:	6022      	str	r2, [r4, #0]
 8004796:	461a      	mov	r2, r3
 8004798:	f7ff f848 	bl	800382c <_write>
 800479c:	1c43      	adds	r3, r0, #1
 800479e:	d102      	bne.n	80047a6 <_write_r+0x1e>
 80047a0:	6823      	ldr	r3, [r4, #0]
 80047a2:	b103      	cbz	r3, 80047a6 <_write_r+0x1e>
 80047a4:	602b      	str	r3, [r5, #0]
 80047a6:	bd38      	pop	{r3, r4, r5, pc}
 80047a8:	20001ee8 	.word	0x20001ee8

080047ac <_close_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	4c06      	ldr	r4, [pc, #24]	; (80047c8 <_close_r+0x1c>)
 80047b0:	2300      	movs	r3, #0
 80047b2:	4605      	mov	r5, r0
 80047b4:	4608      	mov	r0, r1
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	f7ff f876 	bl	80038a8 <_close>
 80047bc:	1c43      	adds	r3, r0, #1
 80047be:	d102      	bne.n	80047c6 <_close_r+0x1a>
 80047c0:	6823      	ldr	r3, [r4, #0]
 80047c2:	b103      	cbz	r3, 80047c6 <_close_r+0x1a>
 80047c4:	602b      	str	r3, [r5, #0]
 80047c6:	bd38      	pop	{r3, r4, r5, pc}
 80047c8:	20001ee8 	.word	0x20001ee8

080047cc <_fstat_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	4c07      	ldr	r4, [pc, #28]	; (80047ec <_fstat_r+0x20>)
 80047d0:	2300      	movs	r3, #0
 80047d2:	4605      	mov	r5, r0
 80047d4:	4608      	mov	r0, r1
 80047d6:	4611      	mov	r1, r2
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	f7ff f877 	bl	80038cc <_fstat>
 80047de:	1c43      	adds	r3, r0, #1
 80047e0:	d102      	bne.n	80047e8 <_fstat_r+0x1c>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	b103      	cbz	r3, 80047e8 <_fstat_r+0x1c>
 80047e6:	602b      	str	r3, [r5, #0]
 80047e8:	bd38      	pop	{r3, r4, r5, pc}
 80047ea:	bf00      	nop
 80047ec:	20001ee8 	.word	0x20001ee8

080047f0 <_isatty_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4c06      	ldr	r4, [pc, #24]	; (800480c <_isatty_r+0x1c>)
 80047f4:	2300      	movs	r3, #0
 80047f6:	4605      	mov	r5, r0
 80047f8:	4608      	mov	r0, r1
 80047fa:	6023      	str	r3, [r4, #0]
 80047fc:	f7ff f878 	bl	80038f0 <_isatty>
 8004800:	1c43      	adds	r3, r0, #1
 8004802:	d102      	bne.n	800480a <_isatty_r+0x1a>
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	b103      	cbz	r3, 800480a <_isatty_r+0x1a>
 8004808:	602b      	str	r3, [r5, #0]
 800480a:	bd38      	pop	{r3, r4, r5, pc}
 800480c:	20001ee8 	.word	0x20001ee8

08004810 <_lseek_r>:
 8004810:	b538      	push	{r3, r4, r5, lr}
 8004812:	4c07      	ldr	r4, [pc, #28]	; (8004830 <_lseek_r+0x20>)
 8004814:	4605      	mov	r5, r0
 8004816:	4608      	mov	r0, r1
 8004818:	4611      	mov	r1, r2
 800481a:	2200      	movs	r2, #0
 800481c:	6022      	str	r2, [r4, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	f7ff f876 	bl	8003910 <_lseek>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d102      	bne.n	800482e <_lseek_r+0x1e>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	b103      	cbz	r3, 800482e <_lseek_r+0x1e>
 800482c:	602b      	str	r3, [r5, #0]
 800482e:	bd38      	pop	{r3, r4, r5, pc}
 8004830:	20001ee8 	.word	0x20001ee8

08004834 <_read_r>:
 8004834:	b538      	push	{r3, r4, r5, lr}
 8004836:	4c07      	ldr	r4, [pc, #28]	; (8004854 <_read_r+0x20>)
 8004838:	4605      	mov	r5, r0
 800483a:	4608      	mov	r0, r1
 800483c:	4611      	mov	r1, r2
 800483e:	2200      	movs	r2, #0
 8004840:	6022      	str	r2, [r4, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	f7ff f878 	bl	8003938 <_read>
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	d102      	bne.n	8004852 <_read_r+0x1e>
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	b103      	cbz	r3, 8004852 <_read_r+0x1e>
 8004850:	602b      	str	r3, [r5, #0]
 8004852:	bd38      	pop	{r3, r4, r5, pc}
 8004854:	20001ee8 	.word	0x20001ee8
 8004858:	454c4449 	.word	0x454c4449
 800485c:	00000000 	.word	0x00000000
 8004860:	20726d54 	.word	0x20726d54
 8004864:	00637653 	.word	0x00637653
 8004868:	51726d54 	.word	0x51726d54
 800486c:	00000000 	.word	0x00000000
 8004870:	72657355 	.word	0x72657355
 8004874:	6665445f 	.word	0x6665445f
 8004878:	64656e69 	.word	0x64656e69
 800487c:	7361545f 	.word	0x7361545f
 8004880:	0000316b 	.word	0x0000316b
 8004884:	72657355 	.word	0x72657355
 8004888:	6665445f 	.word	0x6665445f
 800488c:	64656e69 	.word	0x64656e69
 8004890:	7361545f 	.word	0x7361545f
 8004894:	0000326b 	.word	0x0000326b
 8004898:	72657355 	.word	0x72657355
 800489c:	6665445f 	.word	0x6665445f
 80048a0:	64656e69 	.word	0x64656e69
 80048a4:	7361545f 	.word	0x7361545f
 80048a8:	0000336b 	.word	0x0000336b
 80048ac:	61657263 	.word	0x61657263
 80048b0:	44446574 	.word	0x44446574
 80048b4:	6b736154 	.word	0x6b736154
 80048b8:	6e55203a 	.word	0x6e55203a
 80048bc:	656c6261 	.word	0x656c6261
 80048c0:	206f7420 	.word	0x206f7420
 80048c4:	61657263 	.word	0x61657263
 80048c8:	74206574 	.word	0x74206574
 80048cc:	3a6b7361 	.word	0x3a6b7361
 80048d0:	0a642520 	.word	0x0a642520
 80048d4:	00000000 	.word	0x00000000
 80048d8:	61657263 	.word	0x61657263
 80048dc:	44446574 	.word	0x44446574
 80048e0:	6b736154 	.word	0x6b736154
 80048e4:	6146203a 	.word	0x6146203a
 80048e8:	64656c69 	.word	0x64656c69
 80048ec:	206f7420 	.word	0x206f7420
 80048f0:	646e6573 	.word	0x646e6573
 80048f4:	73617420 	.word	0x73617420
 80048f8:	6425206b 	.word	0x6425206b
 80048fc:	206f7420 	.word	0x206f7420
 8004900:	72657355 	.word	0x72657355
 8004904:	6665445f 	.word	0x6665445f
 8004908:	64656e69 	.word	0x64656e69
 800490c:	6575515f 	.word	0x6575515f
 8004910:	000a6575 	.word	0x000a6575
 8004914:	656e6547 	.word	0x656e6547
 8004918:	6f746172 	.word	0x6f746172
 800491c:	75515f72 	.word	0x75515f72
 8004920:	00657565 	.word	0x00657565
 8004924:	72657355 	.word	0x72657355
 8004928:	6665445f 	.word	0x6665445f
 800492c:	64656e69 	.word	0x64656e69
 8004930:	6575515f 	.word	0x6575515f
 8004934:	00006575 	.word	0x00006575
 8004938:	696e6f4d 	.word	0x696e6f4d
 800493c:	5f726f74 	.word	0x5f726f74
 8004940:	75657551 	.word	0x75657551
 8004944:	00000065 	.word	0x00000065
 8004948:	75736552 	.word	0x75736552
 800494c:	515f746c 	.word	0x515f746c
 8004950:	65756575 	.word	0x65756575
 8004954:	00000000 	.word	0x00000000
 8004958:	00534444 	.word	0x00534444
 800495c:	316e6547 	.word	0x316e6547
 8004960:	00000000 	.word	0x00000000
 8004964:	326e6547 	.word	0x326e6547
 8004968:	00000000 	.word	0x00000000
 800496c:	336e6547 	.word	0x336e6547
 8004970:	00000000 	.word	0x00000000
 8004974:	696e6f4d 	.word	0x696e6f4d
 8004978:	00726f74 	.word	0x00726f74
 800497c:	616e614d 	.word	0x616e614d
 8004980:	20726567 	.word	0x20726567
 8004984:	6c696146 	.word	0x6c696146
 8004988:	00216465 	.word	0x00216465
 800498c:	69746341 	.word	0x69746341
 8004990:	54206576 	.word	0x54206576
 8004994:	736b7361 	.word	0x736b7361
 8004998:	6425203a 	.word	0x6425203a
 800499c:	0000000a 	.word	0x0000000a
 80049a0:	706d6f43 	.word	0x706d6f43
 80049a4:	6574656c 	.word	0x6574656c
 80049a8:	61542064 	.word	0x61542064
 80049ac:	3a736b73 	.word	0x3a736b73
 80049b0:	0a642520 	.word	0x0a642520
 80049b4:	00000000 	.word	0x00000000
 80049b8:	7265764f 	.word	0x7265764f
 80049bc:	20657564 	.word	0x20657564
 80049c0:	6b736154 	.word	0x6b736154
 80049c4:	25203a73 	.word	0x25203a73
 80049c8:	00000a64 	.word	0x00000a64

080049cc <__sf_fake_stderr>:
	...

080049ec <__sf_fake_stdin>:
	...

08004a0c <__sf_fake_stdout>:
	...

08004a2c <_global_impure_ptr>:
 8004a2c:	2000001c                                ... 

08004a30 <_init>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	bf00      	nop
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr

08004a3c <_fini>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	bf00      	nop
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr
